{"id":"asset\/external\/protos\/cloud\/orgpolicy\/v1\/policy\/listpolicy","type":"","title":"Google\\Cloud\\OrgPolicy\\V1\\Policy\\ListPolicy","name":"ListPolicy","description":"<p>Used in <code>policy_type<\/code> to specify how <code>list_policy<\/code> behaves at this\nresource.<\/p>\n<p><code>ListPolicy<\/code> can define specific values and subtrees of Cloud Resource\nManager resource hierarchy (<code>Organizations<\/code>, <code>Folders<\/code>, <code>Projects<\/code>) that\nare allowed or denied by setting the <code>allowed_values<\/code> and <code>denied_values<\/code>\nfields. This is achieved by using the <code>under:<\/code> and optional <code>is:<\/code> prefixes.\nThe <code>under:<\/code> prefix is used to denote resource subtree values.\nThe <code>is:<\/code> prefix is used to denote specific values, and is required only\nif the value contains a &quot;:&quot;. Values prefixed with &quot;is:&quot; are treated the\nsame as values with no prefix.\nAncestry subtrees must be in one of the following formats:<\/p>\n<ul>\n<li>&quot;projects\/<project-id>&quot;, e.g. &quot;projects\/tokyo-rain-123&quot;<\/li>\n<li>&quot;folders\/<folder-id>&quot;, e.g. &quot;folders\/1234&quot;<\/li>\n<li>&quot;organizations\/<organization-id>&quot;, e.g. &quot;organizations\/1234&quot;\nThe <code>supports_under<\/code> field of the associated <code>Constraint<\/code>  defines whether\nancestry prefixes can be used. You can set <code>allowed_values<\/code> and\n<code>denied_values<\/code> in the same <code>Policy<\/code> if <code>all_values<\/code> is\n<code>ALL_VALUES_UNSPECIFIED<\/code>. <code>ALLOW<\/code> or <code>DENY<\/code> are used to allow or deny all\nvalues. If <code>all_values<\/code> is set to either <code>ALLOW<\/code> or <code>DENY<\/code>,\n<code>allowed_values<\/code> and <code>denied_values<\/code> must be unset.<\/li>\n<\/ul>\n<p>Generated from protobuf message <code>google.cloud.orgpolicy.v1.Policy.ListPolicy<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"ListPolicy.php#L264","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.allowed_values\n","description":"<p>List of values allowed at this resource. Can only be set if <code>all_values<\/code> is set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string[]<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"optional":null,"nullable":null},{"name":"data.denied_values\n","description":"<p>List of values denied at this resource. Can only be set if <code>all_values<\/code> is set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string[]<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"optional":null,"nullable":null},{"name":"data.all_values\n","description":"<p>The policy all_values state.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null},{"name":"data.suggested_value\n","description":"<p>Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this <code>Policy<\/code>. If <code>suggested_value<\/code> is not set, it will inherit the value specified higher in the hierarchy, unless <code>inherit_from_parent<\/code> is <code>false<\/code>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.inherit_from_parent\n","description":"<p>Determines the inheritance behavior for this <code>Policy<\/code>. By default, a <code>ListPolicy<\/code> set at a resource supercedes any <code>Policy<\/code> set anywhere up the resource hierarchy. However, if <code>inherit_from_parent<\/code> is set to <code>true<\/code>, then the values from the effective <code>Policy<\/code> of the parent resource are inherited, meaning the values set in this <code>Policy<\/code> are added to the values inherited up the hierarchy. Setting <code>Policy<\/code> hierarchies that inherit both allowed values and denied values isn't recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a <code>Policy<\/code> with <code>allowed_values<\/code> set that inherits a <code>Policy<\/code> with <code>denied_values<\/code> set. In this case, the values that are allowed must be in <code>allowed_values<\/code> and not present in <code>denied_values<\/code>. For example, suppose you have a <code>Constraint<\/code> <code>constraints\/serviceuser.services<\/code>, which has a <code>constraint_type<\/code> of <code>list_constraint<\/code>, and with <code>constraint_default<\/code> set to <code>ALLOW<\/code>. Suppose that at the Organization level, a <code>Policy<\/code> is applied that restricts the allowed API activations to {<code>E1<\/code>, <code>E2<\/code>}. Then, if a <code>Policy<\/code> is applied to a project below the Organization that has <code>inherit_from_parent<\/code> set to <code>false<\/code> and field all_values set to DENY, then an attempt to activate any API will be denied. The following examples demonstrate different possible layerings for <code>projects\/bar<\/code> parented by <code>organizations\/foo<\/code>: Example 1 (no inherited values): <code>organizations\/foo<\/code> has a <code>Policy<\/code> with values: {allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;} <code>projects\/bar<\/code> has <code>inherit_from_parent<\/code> <code>false<\/code> and values: {allowed_values: &quot;E3&quot; allowed_values: &quot;E4&quot;} The accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>. The accepted values at <code>projects\/bar<\/code> are <code>E3<\/code>, and <code>E4<\/code>. Example 2 (inherited values): <code>organizations\/foo<\/code> has a <code>Policy<\/code> with values: {allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;} <code>projects\/bar<\/code> has a <code>Policy<\/code> with values: {value: &quot;E3&quot; value: &quot;E4&quot; inherit_from_parent: true} The accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>. The accepted values at <code>projects\/bar<\/code> are <code>E1<\/code>, <code>E2<\/code>, <code>E3<\/code>, and <code>E4<\/code>. Example 3 (inheriting both allowed and denied values): <code>organizations\/foo<\/code> has a <code>Policy<\/code> with values: {allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;} <code>projects\/bar<\/code> has a <code>Policy<\/code> with: {denied_values: &quot;E1&quot;} The accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>. The value accepted at <code>projects\/bar<\/code> is <code>E2<\/code>. Example 4 (RestoreDefault): <code>organizations\/foo<\/code> has a <code>Policy<\/code> with values: {allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;} <code>projects\/bar<\/code> has a <code>Policy<\/code> with values: {RestoreDefault: {}} The accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>. The accepted values at <code>projects\/bar<\/code> are either all or none depending on the value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if <code>DENY<\/code>, none). Example 5 (no policy inherits parent policy): <code>organizations\/foo<\/code> has no <code>Policy<\/code> set. <code>projects\/bar<\/code> has no <code>Policy<\/code> set. The accepted values at both levels are either all or none depending on the value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if <code>DENY<\/code>, none). Example 6 (ListConstraint allowing all): <code>organizations\/foo<\/code> has a <code>Policy<\/code> with values: {allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;} <code>projects\/bar<\/code> has a <code>Policy<\/code> with: {all: ALLOW} The accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, E2<code>. Any value is accepted at<\/code>projects\/bar<code>. Example 7 (ListConstraint allowing none):<\/code>organizations\/foo<code>has a<\/code>Policy<code>with values: {allowed_values: \"E1\" allowed_values: \"E2\"}<\/code>projects\/bar<code>has a<\/code>Policy<code>with: {all: DENY} The accepted values at<\/code>organizations\/foo<code>are<\/code>E1<code>, E2<\/code>. No value is accepted at <code>projects\/bar<\/code>. Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy O1-&gt;{F1, F2}; F1-&gt;{P1}; F2-&gt;{P2, P3}, <code>organizations\/foo<\/code> has a <code>Policy<\/code> with values: {allowed_values: &quot;under:organizations\/O1&quot;} <code>projects\/bar<\/code> has a <code>Policy<\/code> with: {allowed_values: &quot;under:projects\/P3&quot;} {denied_values: &quot;under:folders\/F2&quot;} The accepted values at <code>organizations\/foo<\/code> are <code>organizations\/O1<\/code>, <code>folders\/F1<\/code>, <code>folders\/F2<\/code>, <code>projects\/P1<\/code>, <code>projects\/P2<\/code>, <code>projects\/P3<\/code>. The accepted values at <code>projects\/bar<\/code> are <code>organizations\/O1<\/code>, <code>folders\/F1<\/code>, <code>projects\/P1<\/code>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getAllowedValues","type":"instance","name":"getAllowedValues","source":"ListPolicy.php#L276","description":"<p>List of values allowed  at this resource. Can only be set if <code>all_values<\/code>\nis set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>\n<p>Generated from protobuf field <code>repeated string allowed_values = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"description":""}]},{"id":"setAllowedValues","type":"instance","name":"setAllowedValues","source":"ListPolicy.php#L289","description":"<p>List of values allowed  at this resource. Can only be set if <code>all_values<\/code>\nis set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>\n<p>Generated from protobuf field <code>repeated string allowed_values = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>List of values allowed  at this resource. Can only be set if <code>all_values<\/code>\nis set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string[]<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-asset\/main\/asset\/external\/protos\/cloud\/orgpolicy\/v1\/policy\/listpolicy\">Google\\Cloud\\OrgPolicy\\V1\\Policy\\ListPolicy<\/a>"],"description":""}]},{"id":"getDeniedValues","type":"instance","name":"getDeniedValues","source":"ListPolicy.php#L304","description":"<p>List of values denied at this resource. Can only be set if <code>all_values<\/code>\nis set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>\n<p>Generated from protobuf field <code>repeated string denied_values = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"description":""}]},{"id":"setDeniedValues","type":"instance","name":"setDeniedValues","source":"ListPolicy.php#L317","description":"<p>List of values denied at this resource. Can only be set if <code>all_values<\/code>\nis set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>\n<p>Generated from protobuf field <code>repeated string denied_values = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>List of values denied at this resource. Can only be set if <code>all_values<\/code>\nis set to <code>ALL_VALUES_UNSPECIFIED<\/code>.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string[]<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-asset\/main\/asset\/external\/protos\/cloud\/orgpolicy\/v1\/policy\/listpolicy\">Google\\Cloud\\OrgPolicy\\V1\\Policy\\ListPolicy<\/a>"],"description":""}]},{"id":"getAllValues","type":"instance","name":"getAllValues","source":"ListPolicy.php#L331","description":"<p>The policy all_values state.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.orgpolicy.v1.Policy.ListPolicy.AllValues all_values = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setAllValues","type":"instance","name":"setAllValues","source":"ListPolicy.php#L343","description":"<p>The policy all_values state.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.orgpolicy.v1.Policy.ListPolicy.AllValues all_values = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The policy all_values state.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-asset\/main\/asset\/external\/protos\/cloud\/orgpolicy\/v1\/policy\/listpolicy\">Google\\Cloud\\OrgPolicy\\V1\\Policy\\ListPolicy<\/a>"],"description":""}]},{"id":"getSuggestedValue","type":"instance","name":"getSuggestedValue","source":"ListPolicy.php#L360","description":"<p>Optional. The Google Cloud Console will try to default to a configuration\nthat matches the value specified in this <code>Policy<\/code>. If <code>suggested_value<\/code>\nis not set, it will inherit the value specified higher in the hierarchy,\nunless <code>inherit_from_parent<\/code> is <code>false<\/code>.<\/p>\n<p>Generated from protobuf field <code>string suggested_value = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setSuggestedValue","type":"instance","name":"setSuggestedValue","source":"ListPolicy.php#L375","description":"<p>Optional. The Google Cloud Console will try to default to a configuration\nthat matches the value specified in this <code>Policy<\/code>. If <code>suggested_value<\/code>\nis not set, it will inherit the value specified higher in the hierarchy,\nunless <code>inherit_from_parent<\/code> is <code>false<\/code>.<\/p>\n<p>Generated from protobuf field <code>string suggested_value = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Optional. The Google Cloud Console will try to default to a configuration\nthat matches the value specified in this <code>Policy<\/code>. If <code>suggested_value<\/code>\nis not set, it will inherit the value specified higher in the hierarchy,\nunless <code>inherit_from_parent<\/code> is <code>false<\/code>.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-asset\/main\/asset\/external\/protos\/cloud\/orgpolicy\/v1\/policy\/listpolicy\">Google\\Cloud\\OrgPolicy\\V1\\Policy\\ListPolicy<\/a>"],"description":""}]},{"id":"getInheritFromParent","type":"instance","name":"getInheritFromParent","source":"ListPolicy.php#L473","description":"<p>Determines the inheritance behavior for this <code>Policy<\/code>.<\/p>\n<p>By default, a <code>ListPolicy<\/code> set at a resource supercedes any <code>Policy<\/code> set\nanywhere up the resource hierarchy. However, if <code>inherit_from_parent<\/code> is\nset to <code>true<\/code>, then the values from the effective <code>Policy<\/code> of the parent\nresource are inherited, meaning the values set in this <code>Policy<\/code> are\nadded to the values inherited up the hierarchy.\nSetting <code>Policy<\/code> hierarchies that inherit both allowed values and denied\nvalues isn't recommended in most circumstances to keep the configuration\nsimple and understandable. However, it is possible to set a <code>Policy<\/code> with\n<code>allowed_values<\/code> set that inherits a <code>Policy<\/code> with <code>denied_values<\/code> set.\nIn this case, the values that are allowed must be in <code>allowed_values<\/code> and\nnot present in <code>denied_values<\/code>.\nFor example, suppose you have a <code>Constraint<\/code>\n<code>constraints\/serviceuser.services<\/code>, which has a <code>constraint_type<\/code> of\n<code>list_constraint<\/code>, and with <code>constraint_default<\/code> set to <code>ALLOW<\/code>.\nSuppose that at the Organization level, a <code>Policy<\/code> is applied that\nrestricts the allowed API activations to {<code>E1<\/code>, <code>E2<\/code>}. Then, if a\n<code>Policy<\/code> is applied to a project below the Organization that has\n<code>inherit_from_parent<\/code> set to <code>false<\/code> and field all_values set to DENY,\nthen an attempt to activate any API will be denied.\nThe following examples demonstrate different possible layerings for\n<code>projects\/bar<\/code> parented by <code>organizations\/foo<\/code>:\nExample 1 (no inherited values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has <code>inherit_from_parent<\/code> <code>false<\/code> and values:\n{allowed_values: &quot;E3&quot; allowed_values: &quot;E4&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>E3<\/code>, and <code>E4<\/code>.\nExample 2 (inherited values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with values:\n{value: &quot;E3&quot; value: &quot;E4&quot; inherit_from_parent: true}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>E1<\/code>, <code>E2<\/code>, <code>E3<\/code>, and <code>E4<\/code>.\nExample 3 (inheriting both allowed and denied values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{denied_values: &quot;E1&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe value accepted at <code>projects\/bar<\/code> is <code>E2<\/code>.\nExample 4 (RestoreDefault):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with values:\n{RestoreDefault: {}}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are either all or none depending on\nthe value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if\n<code>DENY<\/code>, none).\nExample 5 (no policy inherits parent policy):\n<code>organizations\/foo<\/code> has no <code>Policy<\/code> set.\n<code>projects\/bar<\/code> has no <code>Policy<\/code> set.\nThe accepted values at both levels are either all or none depending on\nthe value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if\n<code>DENY<\/code>, none).\nExample 6 (ListConstraint allowing all):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{all: ALLOW}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, E2<code>. Any value is accepted at<\/code>projects\/bar<code>. Example 7 (ListConstraint allowing none): <\/code>organizations\/foo<code>has a<\/code>Policy<code>with values: {allowed_values: \"E1\" allowed_values: \"E2\"} <\/code>projects\/bar<code>has a<\/code>Policy<code>with: {all: DENY} The accepted values at<\/code>organizations\/foo<code>are<\/code>E1<code>, E2<\/code>.\nNo value is accepted at <code>projects\/bar<\/code>.\nExample 10 (allowed and denied subtrees of Resource Manager hierarchy):\nGiven the following resource hierarchy\nO1-&gt;{F1, F2}; F1-&gt;{P1}; F2-&gt;{P2, P3},\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;under:organizations\/O1&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{allowed_values: &quot;under:projects\/P3&quot;}\n{denied_values: &quot;under:folders\/F2&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>organizations\/O1<\/code>,\n<code>folders\/F1<\/code>, <code>folders\/F2<\/code>, <code>projects\/P1<\/code>, <code>projects\/P2<\/code>,\n<code>projects\/P3<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>organizations\/O1<\/code>,\n<code>folders\/F1<\/code>, <code>projects\/P1<\/code>.<\/p>\n<p>Generated from protobuf field <code>bool inherit_from_parent = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setInheritFromParent","type":"instance","name":"setInheritFromParent","source":"ListPolicy.php#L569","description":"<p>Determines the inheritance behavior for this <code>Policy<\/code>.<\/p>\n<p>By default, a <code>ListPolicy<\/code> set at a resource supercedes any <code>Policy<\/code> set\nanywhere up the resource hierarchy. However, if <code>inherit_from_parent<\/code> is\nset to <code>true<\/code>, then the values from the effective <code>Policy<\/code> of the parent\nresource are inherited, meaning the values set in this <code>Policy<\/code> are\nadded to the values inherited up the hierarchy.\nSetting <code>Policy<\/code> hierarchies that inherit both allowed values and denied\nvalues isn't recommended in most circumstances to keep the configuration\nsimple and understandable. However, it is possible to set a <code>Policy<\/code> with\n<code>allowed_values<\/code> set that inherits a <code>Policy<\/code> with <code>denied_values<\/code> set.\nIn this case, the values that are allowed must be in <code>allowed_values<\/code> and\nnot present in <code>denied_values<\/code>.\nFor example, suppose you have a <code>Constraint<\/code>\n<code>constraints\/serviceuser.services<\/code>, which has a <code>constraint_type<\/code> of\n<code>list_constraint<\/code>, and with <code>constraint_default<\/code> set to <code>ALLOW<\/code>.\nSuppose that at the Organization level, a <code>Policy<\/code> is applied that\nrestricts the allowed API activations to {<code>E1<\/code>, <code>E2<\/code>}. Then, if a\n<code>Policy<\/code> is applied to a project below the Organization that has\n<code>inherit_from_parent<\/code> set to <code>false<\/code> and field all_values set to DENY,\nthen an attempt to activate any API will be denied.\nThe following examples demonstrate different possible layerings for\n<code>projects\/bar<\/code> parented by <code>organizations\/foo<\/code>:\nExample 1 (no inherited values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has <code>inherit_from_parent<\/code> <code>false<\/code> and values:\n{allowed_values: &quot;E3&quot; allowed_values: &quot;E4&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>E3<\/code>, and <code>E4<\/code>.\nExample 2 (inherited values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with values:\n{value: &quot;E3&quot; value: &quot;E4&quot; inherit_from_parent: true}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>E1<\/code>, <code>E2<\/code>, <code>E3<\/code>, and <code>E4<\/code>.\nExample 3 (inheriting both allowed and denied values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{denied_values: &quot;E1&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe value accepted at <code>projects\/bar<\/code> is <code>E2<\/code>.\nExample 4 (RestoreDefault):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with values:\n{RestoreDefault: {}}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are either all or none depending on\nthe value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if\n<code>DENY<\/code>, none).\nExample 5 (no policy inherits parent policy):\n<code>organizations\/foo<\/code> has no <code>Policy<\/code> set.\n<code>projects\/bar<\/code> has no <code>Policy<\/code> set.\nThe accepted values at both levels are either all or none depending on\nthe value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if\n<code>DENY<\/code>, none).\nExample 6 (ListConstraint allowing all):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{all: ALLOW}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, E2<code>. Any value is accepted at<\/code>projects\/bar<code>. Example 7 (ListConstraint allowing none): <\/code>organizations\/foo<code>has a<\/code>Policy<code>with values: {allowed_values: \"E1\" allowed_values: \"E2\"} <\/code>projects\/bar<code>has a<\/code>Policy<code>with: {all: DENY} The accepted values at<\/code>organizations\/foo<code>are<\/code>E1<code>, E2<\/code>.\nNo value is accepted at <code>projects\/bar<\/code>.\nExample 10 (allowed and denied subtrees of Resource Manager hierarchy):\nGiven the following resource hierarchy\nO1-&gt;{F1, F2}; F1-&gt;{P1}; F2-&gt;{P2, P3},\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;under:organizations\/O1&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{allowed_values: &quot;under:projects\/P3&quot;}\n{denied_values: &quot;under:folders\/F2&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>organizations\/O1<\/code>,\n<code>folders\/F1<\/code>, <code>folders\/F2<\/code>, <code>projects\/P1<\/code>, <code>projects\/P2<\/code>,\n<code>projects\/P3<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>organizations\/O1<\/code>,\n<code>folders\/F1<\/code>, <code>projects\/P1<\/code>.<\/p>\n<p>Generated from protobuf field <code>bool inherit_from_parent = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Determines the inheritance behavior for this <code>Policy<\/code>.<\/p>\n<p>By default, a <code>ListPolicy<\/code> set at a resource supercedes any <code>Policy<\/code> set\nanywhere up the resource hierarchy. However, if <code>inherit_from_parent<\/code> is\nset to <code>true<\/code>, then the values from the effective <code>Policy<\/code> of the parent\nresource are inherited, meaning the values set in this <code>Policy<\/code> are\nadded to the values inherited up the hierarchy.\nSetting <code>Policy<\/code> hierarchies that inherit both allowed values and denied\nvalues isn't recommended in most circumstances to keep the configuration\nsimple and understandable. However, it is possible to set a <code>Policy<\/code> with\n<code>allowed_values<\/code> set that inherits a <code>Policy<\/code> with <code>denied_values<\/code> set.\nIn this case, the values that are allowed must be in <code>allowed_values<\/code> and\nnot present in <code>denied_values<\/code>.\nFor example, suppose you have a <code>Constraint<\/code>\n<code>constraints\/serviceuser.services<\/code>, which has a <code>constraint_type<\/code> of\n<code>list_constraint<\/code>, and with <code>constraint_default<\/code> set to <code>ALLOW<\/code>.\nSuppose that at the Organization level, a <code>Policy<\/code> is applied that\nrestricts the allowed API activations to {<code>E1<\/code>, <code>E2<\/code>}. Then, if a\n<code>Policy<\/code> is applied to a project below the Organization that has\n<code>inherit_from_parent<\/code> set to <code>false<\/code> and field all_values set to DENY,\nthen an attempt to activate any API will be denied.\nThe following examples demonstrate different possible layerings for\n<code>projects\/bar<\/code> parented by <code>organizations\/foo<\/code>:\nExample 1 (no inherited values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has <code>inherit_from_parent<\/code> <code>false<\/code> and values:\n{allowed_values: &quot;E3&quot; allowed_values: &quot;E4&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>E3<\/code>, and <code>E4<\/code>.\nExample 2 (inherited values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with values:\n{value: &quot;E3&quot; value: &quot;E4&quot; inherit_from_parent: true}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>E1<\/code>, <code>E2<\/code>, <code>E3<\/code>, and <code>E4<\/code>.\nExample 3 (inheriting both allowed and denied values):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{denied_values: &quot;E1&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe value accepted at <code>projects\/bar<\/code> is <code>E2<\/code>.\nExample 4 (RestoreDefault):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values:&quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with values:\n{RestoreDefault: {}}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, <code>E2<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are either all or none depending on\nthe value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if\n<code>DENY<\/code>, none).\nExample 5 (no policy inherits parent policy):\n<code>organizations\/foo<\/code> has no <code>Policy<\/code> set.\n<code>projects\/bar<\/code> has no <code>Policy<\/code> set.\nThe accepted values at both levels are either all or none depending on\nthe value of <code>constraint_default<\/code> (if <code>ALLOW<\/code>, all; if\n<code>DENY<\/code>, none).\nExample 6 (ListConstraint allowing all):\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;E1&quot; allowed_values: &quot;E2&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{all: ALLOW}\nThe accepted values at <code>organizations\/foo<\/code> are <code>E1<\/code>, E2<code>. Any value is accepted at<\/code>projects\/bar<code>. Example 7 (ListConstraint allowing none): <\/code>organizations\/foo<code>has a<\/code>Policy<code>with values: {allowed_values: \"E1\" allowed_values: \"E2\"} <\/code>projects\/bar<code>has a<\/code>Policy<code>with: {all: DENY} The accepted values at<\/code>organizations\/foo<code>are<\/code>E1<code>, E2<\/code>.\nNo value is accepted at <code>projects\/bar<\/code>.\nExample 10 (allowed and denied subtrees of Resource Manager hierarchy):\nGiven the following resource hierarchy\nO1-&gt;{F1, F2}; F1-&gt;{P1}; F2-&gt;{P2, P3},\n<code>organizations\/foo<\/code> has a <code>Policy<\/code> with values:\n{allowed_values: &quot;under:organizations\/O1&quot;}\n<code>projects\/bar<\/code> has a <code>Policy<\/code> with:\n{allowed_values: &quot;under:projects\/P3&quot;}\n{denied_values: &quot;under:folders\/F2&quot;}\nThe accepted values at <code>organizations\/foo<\/code> are <code>organizations\/O1<\/code>,\n<code>folders\/F1<\/code>, <code>folders\/F2<\/code>, <code>projects\/P1<\/code>, <code>projects\/P2<\/code>,\n<code>projects\/P3<\/code>.\nThe accepted values at <code>projects\/bar<\/code> are <code>organizations\/O1<\/code>,\n<code>folders\/F1<\/code>, <code>projects\/P1<\/code>.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-asset\/main\/asset\/external\/protos\/cloud\/orgpolicy\/v1\/policy\/listpolicy\">Google\\Cloud\\OrgPolicy\\V1\\Policy\\ListPolicy<\/a>"],"description":""}]}]}