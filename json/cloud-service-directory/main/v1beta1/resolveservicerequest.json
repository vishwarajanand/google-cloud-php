{"id":"servicedirectory\/v1beta1\/resolveservicerequest","type":"","title":"Google\\Cloud\\ServiceDirectory\\V1beta1\\ResolveServiceRequest","name":"ResolveServiceRequest","description":"<p>The request message for [LookupService.ResolveService][google.cloud.servicedirectory.v1beta1.LookupService.ResolveService].<\/p>\n<p>Looks up a service by its name, returns the service and its endpoints.<\/p>\n<p>Generated from protobuf message <code>google.cloud.servicedirectory.v1beta1.ResolveServiceRequest<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L110","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.name\n","description":"<p>Required. The name of the service to resolve.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.max_endpoints\n","description":"<p>Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value less than one is specified, the Default is used. If a value greater than the Maximum is specified, the Maximum is used.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null},{"name":"data.endpoint_filter\n","description":"<p>Optional. The filter applied to the endpoints of the resolved service. General <code>filter<\/code> string syntax: <code>&lt;field&gt; &lt;operator&gt; &lt;value&gt; (&lt;logical connector&gt;)<\/code> <em> <code>&lt;field&gt;<\/code> can be <code>name<\/code>, <code>address<\/code>, <code>port<\/code>, or <code>metadata.&lt;key&gt;<\/code> for map field <\/em> <code>&lt;operator&gt;<\/code> can be <code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>, <code>!=<\/code>, <code>=<\/code>, <code>:<\/code>. Of which <code>:<\/code> means <code>HAS<\/code>, and is roughly the same as <code>=<\/code> <em> <code>&lt;value&gt;<\/code> must be the same data type as field <\/em> <code>&lt;logical connector&gt;<\/code> can be <code>AND<\/code>, <code>OR<\/code>, <code>NOT<\/code> Examples of valid filters: <em> <code>metadata.owner<\/code> returns endpoints that have a annotation with the key <code>owner<\/code>, this is the same as <code>metadata:owner<\/code> <\/em> <code>metadata.protocol=gRPC<\/code> returns endpoints that have key\/value <code>protocol=gRPC<\/code> <em> <code>address=192.108.1.105<\/code> returns endpoints that have this address <\/em> <code>port&gt;8080<\/code> returns endpoints that have port number larger than 8080 <em> <code>name&gt;projects\/my-project\/locations\/us-east1\/namespaces\/my-namespace\/services\/my-service\/endpoints\/endpoint-c<\/code> returns endpoints that have name that is alphabetically later than the string, so &quot;endpoint-e&quot; is returned but &quot;endpoint-a&quot; is not <\/em> <code>metadata.owner!=sd AND metadata.foo=bar<\/code> returns endpoints that have <code>owner<\/code> in annotation key but value is not <code>sd<\/code> AND have key\/value <code>foo=bar<\/code> * <code>doesnotexist.foo=bar<\/code> returns an empty list. Note that endpoint doesn't have a field called &quot;doesnotexist&quot;. Since the filter does not match any endpoint, it returns no results For more information about filtering, see <a href=\"https:\/\/aip.dev\/160\">API Filtering<\/a>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getName","type":"instance","name":"getName","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L121","description":"<p>Required. The name of the service to resolve.<\/p>\n<p>Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setName","type":"instance","name":"setName","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L133","description":"<p>Required. The name of the service to resolve.<\/p>\n<p>Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Required. The name of the service to resolve.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-service-directory\/main\/servicedirectory\/v1beta1\/resolveservicerequest\">Google\\Cloud\\ServiceDirectory\\V1beta1\\ResolveServiceRequest<\/a>"],"description":""}]},{"id":"getMaxEndpoints","type":"instance","name":"getMaxEndpoints","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L149","description":"<p>Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100.<\/p>\n<p>If a value less than one is specified, the Default is used.\nIf a value greater than the Maximum is specified, the Maximum is used.<\/p>\n<p>Generated from protobuf field <code>int32 max_endpoints = 2 [(.google.api.field_behavior) = OPTIONAL];<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setMaxEndpoints","type":"instance","name":"setMaxEndpoints","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L163","description":"<p>Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100.<\/p>\n<p>If a value less than one is specified, the Default is used.\nIf a value greater than the Maximum is specified, the Maximum is used.<\/p>\n<p>Generated from protobuf field <code>int32 max_endpoints = 2 [(.google.api.field_behavior) = OPTIONAL];<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100.<\/p>\n<p>If a value less than one is specified, the Default is used.\nIf a value greater than the Maximum is specified, the Maximum is used.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-service-directory\/main\/servicedirectory\/v1beta1\/resolveservicerequest\">Google\\Cloud\\ServiceDirectory\\V1beta1\\ResolveServiceRequest<\/a>"],"description":""}]},{"id":"getEndpointFilter","type":"instance","name":"getEndpointFilter","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L204","description":"<p>Optional. The filter applied to the endpoints of the resolved service.<\/p>\n<p>General <code>filter<\/code> string syntax:\n<code>&lt;field&gt; &lt;operator&gt; &lt;value&gt; (&lt;logical connector&gt;)<\/code><\/p>\n<ul>\n<li><code>&lt;field&gt;<\/code> can be <code>name<\/code>, <code>address<\/code>, <code>port<\/code>, or <code>metadata.&lt;key&gt;<\/code> for\nmap field<\/li>\n<li><code>&lt;operator&gt;<\/code> can be <code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>, <code>!=<\/code>, <code>=<\/code>, <code>:<\/code>. Of which <code>:<\/code>\nmeans <code>HAS<\/code>, and is roughly the same as <code>=<\/code><\/li>\n<li><code>&lt;value&gt;<\/code> must be the same data type as field<\/li>\n<li><code>&lt;logical connector&gt;<\/code> can be <code>AND<\/code>, <code>OR<\/code>, <code>NOT<\/code>\nExamples of valid filters:<\/li>\n<li><code>metadata.owner<\/code> returns endpoints that have a annotation with the key\n<code>owner<\/code>, this is the same as <code>metadata:owner<\/code><\/li>\n<li><code>metadata.protocol=gRPC<\/code> returns endpoints that have key\/value\n<code>protocol=gRPC<\/code><\/li>\n<li><code>address=192.108.1.105<\/code> returns endpoints that have this address<\/li>\n<li><code>port&gt;8080<\/code> returns endpoints that have port number larger than 8080<\/li>\n<li>\n<p><code>name&gt;projects\/my-project\/locations\/us-east1\/namespaces\/my-namespace\/services\/my-service\/endpoints\/endpoint-c<\/code>\nreturns endpoints that have name that is alphabetically later than the\nstring, so &quot;endpoint-e&quot; is returned but &quot;endpoint-a&quot; is not<\/p>\n<\/li>\n<li><code>metadata.owner!=sd AND metadata.foo=bar<\/code> returns endpoints that have\n<code>owner<\/code> in annotation key but value is not <code>sd<\/code> AND have key\/value\n<code>foo=bar<\/code><\/li>\n<li><code>doesnotexist.foo=bar<\/code> returns an empty list. Note that endpoint\ndoesn't have a field called &quot;doesnotexist&quot;. Since the filter does not\nmatch any endpoint, it returns no results\nFor more information about filtering, see\n<a href=\"https:\/\/aip.dev\/160\">API Filtering<\/a>.<\/li>\n<\/ul>\n<p>Generated from protobuf field <code>string endpoint_filter = 3 [(.google.api.field_behavior) = OPTIONAL];<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setEndpointFilter","type":"instance","name":"setEndpointFilter","source":"ServiceDirectory\/src\/V1beta1\/ResolveServiceRequest.php#L243","description":"<p>Optional. The filter applied to the endpoints of the resolved service.<\/p>\n<p>General <code>filter<\/code> string syntax:\n<code>&lt;field&gt; &lt;operator&gt; &lt;value&gt; (&lt;logical connector&gt;)<\/code><\/p>\n<ul>\n<li><code>&lt;field&gt;<\/code> can be <code>name<\/code>, <code>address<\/code>, <code>port<\/code>, or <code>metadata.&lt;key&gt;<\/code> for\nmap field<\/li>\n<li><code>&lt;operator&gt;<\/code> can be <code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>, <code>!=<\/code>, <code>=<\/code>, <code>:<\/code>. Of which <code>:<\/code>\nmeans <code>HAS<\/code>, and is roughly the same as <code>=<\/code><\/li>\n<li><code>&lt;value&gt;<\/code> must be the same data type as field<\/li>\n<li><code>&lt;logical connector&gt;<\/code> can be <code>AND<\/code>, <code>OR<\/code>, <code>NOT<\/code>\nExamples of valid filters:<\/li>\n<li><code>metadata.owner<\/code> returns endpoints that have a annotation with the key\n<code>owner<\/code>, this is the same as <code>metadata:owner<\/code><\/li>\n<li><code>metadata.protocol=gRPC<\/code> returns endpoints that have key\/value\n<code>protocol=gRPC<\/code><\/li>\n<li><code>address=192.108.1.105<\/code> returns endpoints that have this address<\/li>\n<li><code>port&gt;8080<\/code> returns endpoints that have port number larger than 8080<\/li>\n<li>\n<p><code>name&gt;projects\/my-project\/locations\/us-east1\/namespaces\/my-namespace\/services\/my-service\/endpoints\/endpoint-c<\/code>\nreturns endpoints that have name that is alphabetically later than the\nstring, so &quot;endpoint-e&quot; is returned but &quot;endpoint-a&quot; is not<\/p>\n<\/li>\n<li><code>metadata.owner!=sd AND metadata.foo=bar<\/code> returns endpoints that have\n<code>owner<\/code> in annotation key but value is not <code>sd<\/code> AND have key\/value\n<code>foo=bar<\/code><\/li>\n<li><code>doesnotexist.foo=bar<\/code> returns an empty list. Note that endpoint\ndoesn't have a field called &quot;doesnotexist&quot;. Since the filter does not\nmatch any endpoint, it returns no results\nFor more information about filtering, see\n<a href=\"https:\/\/aip.dev\/160\">API Filtering<\/a>.<\/li>\n<\/ul>\n<p>Generated from protobuf field <code>string endpoint_filter = 3 [(.google.api.field_behavior) = OPTIONAL];<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Optional. The filter applied to the endpoints of the resolved service.<\/p>\n<p>General <code>filter<\/code> string syntax:\n<code>&lt;field&gt; &lt;operator&gt; &lt;value&gt; (&lt;logical connector&gt;)<\/code><\/p>\n<ul>\n<li><code>&lt;field&gt;<\/code> can be <code>name<\/code>, <code>address<\/code>, <code>port<\/code>, or <code>metadata.&lt;key&gt;<\/code> for\nmap field<\/li>\n<li><code>&lt;operator&gt;<\/code> can be <code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>, <code>!=<\/code>, <code>=<\/code>, <code>:<\/code>. Of which <code>:<\/code>\nmeans <code>HAS<\/code>, and is roughly the same as <code>=<\/code><\/li>\n<li><code>&lt;value&gt;<\/code> must be the same data type as field<\/li>\n<li><code>&lt;logical connector&gt;<\/code> can be <code>AND<\/code>, <code>OR<\/code>, <code>NOT<\/code>\nExamples of valid filters:<\/li>\n<li><code>metadata.owner<\/code> returns endpoints that have a annotation with the key\n<code>owner<\/code>, this is the same as <code>metadata:owner<\/code><\/li>\n<li><code>metadata.protocol=gRPC<\/code> returns endpoints that have key\/value\n<code>protocol=gRPC<\/code><\/li>\n<li><code>address=192.108.1.105<\/code> returns endpoints that have this address<\/li>\n<li><code>port&gt;8080<\/code> returns endpoints that have port number larger than 8080<\/li>\n<li>\n<p><code>name&gt;projects\/my-project\/locations\/us-east1\/namespaces\/my-namespace\/services\/my-service\/endpoints\/endpoint-c<\/code>\nreturns endpoints that have name that is alphabetically later than the\nstring, so &quot;endpoint-e&quot; is returned but &quot;endpoint-a&quot; is not<\/p>\n<\/li>\n<li><code>metadata.owner!=sd AND metadata.foo=bar<\/code> returns endpoints that have\n<code>owner<\/code> in annotation key but value is not <code>sd<\/code> AND have key\/value\n<code>foo=bar<\/code><\/li>\n<li><code>doesnotexist.foo=bar<\/code> returns an empty list. Note that endpoint\ndoesn't have a field called &quot;doesnotexist&quot;. Since the filter does not\nmatch any endpoint, it returns no results\nFor more information about filtering, see\n<a href=\"https:\/\/aip.dev\/160\">API Filtering<\/a>.<\/li>\n<\/ul>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-service-directory\/main\/servicedirectory\/v1beta1\/resolveservicerequest\">Google\\Cloud\\ServiceDirectory\\V1beta1\\ResolveServiceRequest<\/a>"],"description":""}]}]}