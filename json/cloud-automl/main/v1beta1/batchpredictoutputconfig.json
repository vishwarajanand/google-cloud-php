{"id":"automl\/v1beta1\/batchpredictoutputconfig","type":"","title":"Google\\Cloud\\AutoMl\\V1beta1\\BatchPredictOutputConfig","name":"BatchPredictOutputConfig","description":"<p>Output configuration for BatchPredict Action.<\/p>\n<p>As destination the\n[gcs_destination][google.cloud.automl.v1beta1.BatchPredictOutputConfig.gcs_destination]\nmust be set unless specified otherwise for a domain. If gcs_destination is\nset then in the given directory a new directory is created. Its name\nwill be\n&quot;prediction-<model-display-name>-<timestamp-of-prediction-call>&quot;,\nwhere timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. The contents\nof it depends on the ML problem the predictions are made for.<\/p>\n<ul>\n<li>For Image Classification:\nIn the created directory files <code>image_classification_1.jsonl<\/code>,\n<code>image_classification_2.jsonl<\/code>,...,<code>image_classification_N.jsonl<\/code>\nwill be created, where N may be 1, and depends on the\ntotal number of the successfully predicted images and annotations.\nA single image will be listed only once with all its annotations,\nand its annotations will never be split across files.\nEach .JSONL file will contain, per line, a JSON representation of a\nproto that wraps image's &quot;ID&quot; : &quot;<id_value>&quot; followed by a list of\nzero or more AnnotationPayload protos (called annotations), which\nhave classification detail populated.\nIf prediction for any image failed (partially or completely), then an\nadditional <code>errors_1.jsonl<\/code>, <code>errors_2.jsonl<\/code>,..., <code>errors_N.jsonl<\/code>\nfiles will be created (N depends on total number of failed\npredictions). These files will have a JSON representation of a proto\nthat wraps the same &quot;ID&quot; : &quot;<id_value>&quot; but here followed by\nexactly one\n<a href=\"https:\n\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto\"><code>google.rpc.Status<\/code><\/a>\ncontaining only <code>code<\/code> and <code>message<\/code>fields.<\/li>\n<li>For Image Object Detection:\nIn the created directory files <code>image_object_detection_1.jsonl<\/code>,\n<code>image_object_detection_2.jsonl<\/code>,...,<code>image_object_detection_N.jsonl<\/code>\nwill be created, where N may be 1, and depends on the\ntotal number of the successfully predicted images and annotations.\nEach .JSONL file will contain, per line, a JSON representation of a\nproto that wraps image's &quot;ID&quot; : &quot;<id_value>&quot; followed by a list of\nzero or more AnnotationPayload protos (called annotations), which\nhave image_object_detection detail populated. A single image will\nbe listed only once with all its annotations, and its annotations\nwill never be split across files.\nIf prediction for any image failed (partially or completely), then\nadditional <code>errors_1.jsonl<\/code>, <code>errors_2.jsonl<\/code>,..., <code>errors_N.jsonl<\/code>\nfiles will be created (N depends on total number of failed\npredictions). These files will have a JSON representation of a proto\nthat wraps the same &quot;ID&quot; : &quot;<id_value>&quot; but here followed by\nexactly one\n<a href=\"https:\n\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto\"><code>google.rpc.Status<\/code><\/a>\ncontaining only <code>code<\/code> and <code>message<\/code>fields.<\/li>\n<li>For Video Classification:\nIn the created directory a video_classification.csv file, and a .JSON\nfile per each video classification requested in the input (i.e. each\nline in given CSV(s)), will be created.\nThe format of video_classification.csv is:\nGCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END,JSON_FILE_NAME,STATUS\nwhere:\nGCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END = matches 1 to 1\nthe prediction input lines (i.e. video_classification.csv has\nprecisely the same number of lines as the prediction input had.)\nJSON_FILE_NAME = Name of .JSON file in the output directory, which\ncontains prediction responses for the video time segment.\nSTATUS = &quot;OK&quot; if prediction completed successfully, or an error code\nwith message otherwise. If STATUS is not &quot;OK&quot; then the .JSON file\nfor that line may not exist or be empty.\nEach .JSON file, assuming STATUS is &quot;OK&quot;, will contain a list of\nAnnotationPayload protos in JSON format, which are the predictions\nfor the video time segment the file is assigned to in the\nvideo_classification.csv. All AnnotationPayload protos will have\nvideo_classification field set, and will be sorted by\nvideo_classification.type field (note that the returned types are\ngoverned by <code>classifaction_types<\/code> parameter in\n[PredictService.BatchPredictRequest.params][]).<\/li>\n<li>For Video Object Tracking:\nIn the created directory a video_object_tracking.csv file will be\ncreated, and multiple files video_object_trackinng_1.json,\nvideo_object_trackinng_2.json,..., video_object_trackinng_N.json,\nwhere N is the number of requests in the input (i.e. the number of\nlines in given CSV(s)).\nThe format of video_object_tracking.csv is:\nGCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END,JSON_FILE_NAME,STATUS\nwhere:\nGCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END = matches 1 to 1\nthe prediction input lines (i.e. video_object_tracking.csv has\nprecisely the same number of lines as the prediction input had.)\nJSON_FILE_NAME = Name of .JSON file in the output directory, which\ncontains prediction responses for the video time segment.\nSTATUS = &quot;OK&quot; if prediction completed successfully, or an error\ncode with message otherwise. If STATUS is not &quot;OK&quot; then the .JSON\nfile for that line may not exist or be empty.\nEach .JSON file, assuming STATUS is &quot;OK&quot;, will contain a list of\nAnnotationPayload protos in JSON format, which are the predictions\nfor each frame of the video time segment the file is assigned to in\nvideo_object_tracking.csv. All AnnotationPayload protos will have\nvideo_object_tracking field set.<\/li>\n<li>For Text Classification:\nIn the created directory files <code>text_classification_1.jsonl<\/code>,\n<code>text_classification_2.jsonl<\/code>,...,<code>text_classification_N.jsonl<\/code>\nwill be created, where N may be 1, and depends on the\ntotal number of inputs and annotations found.\nEach .JSONL file will contain, per line, a JSON representation of a\nproto that wraps input text snippet or input text file and a list of\nzero or more AnnotationPayload protos (called annotations), which\nhave classification detail populated. A single text snippet or file\nwill be listed only once with all its annotations, and its\nannotations will never be split across files.\nIf prediction for any text snippet or file failed (partially or\ncompletely), then additional <code>errors_1.jsonl<\/code>, <code>errors_2.jsonl<\/code>,...,\n<code>errors_N.jsonl<\/code> files will be created (N depends on total number of\nfailed predictions). These files will have a JSON representation of a\nproto that wraps input text snippet or input text file followed by\nexactly one\n<a href=\"https:\n\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto\"><code>google.rpc.Status<\/code><\/a>\ncontaining only <code>code<\/code> and <code>message<\/code>.<\/li>\n<li>For Text Sentiment:\nIn the created directory files <code>text_sentiment_1.jsonl<\/code>,\n<code>text_sentiment_2.jsonl<\/code>,...,<code>text_sentiment_N.jsonl<\/code>\nwill be created, where N may be 1, and depends on the\ntotal number of inputs and annotations found.\nEach .JSONL file will contain, per line, a JSON representation of a\nproto that wraps input text snippet or input text file and a list of\nzero or more AnnotationPayload protos (called annotations), which\nhave text_sentiment detail populated. A single text snippet or file\nwill be listed only once with all its annotations, and its\nannotations will never be split across files.\nIf prediction for any text snippet or file failed (partially or\ncompletely), then additional <code>errors_1.jsonl<\/code>, <code>errors_2.jsonl<\/code>,...,\n<code>errors_N.jsonl<\/code> files will be created (N depends on total number of\nfailed predictions). These files will have a JSON representation of a\nproto that wraps input text snippet or input text file followed by\nexactly one\n<a href=\"https:\n\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto\"><code>google.rpc.Status<\/code><\/a>\ncontaining only <code>code<\/code> and <code>message<\/code>.\n<ul>\n<li>For Text Extraction:\nIn the created directory files <code>text_extraction_1.jsonl<\/code>,\n<code>text_extraction_2.jsonl<\/code>,...,<code>text_extraction_N.jsonl<\/code>\nwill be created, where N may be 1, and depends on the\ntotal number of inputs and annotations found.\nThe contents of these .JSONL file(s) depend on whether the input\nused inline text, or documents.\nIf input was inline, then each .JSONL file will contain, per line,\na JSON representation of a proto that wraps given in request text\nsnippet's &quot;id&quot; (if specified), followed by input text snippet,\nand a list of zero or more\nAnnotationPayload protos (called annotations), which have\ntext_extraction detail populated. A single text snippet will be\nlisted only once with all its annotations, and its annotations will\nnever be split across files.\nIf input used documents, then each .JSONL file will contain, per\nline, a JSON representation of a proto that wraps given in request\ndocument proto, followed by its OCR-ed representation in the form\nof a text snippet, finally followed by a list of zero or more\nAnnotationPayload protos (called annotations), which have\ntext_extraction detail populated and refer, via their indices, to\nthe OCR-ed text snippet. A single document (and its text snippet)\nwill be listed only once with all its annotations, and its\nannotations will never be split across files.\nIf prediction for any text snippet failed (partially or completely),\nthen additional <code>errors_1.jsonl<\/code>, <code>errors_2.jsonl<\/code>,...,\n<code>errors_N.jsonl<\/code> files will be created (N depends on total number of\nfailed predictions). These files will have a JSON representation of a\nproto that wraps either the &quot;id&quot; : &quot;<id_value>&quot; (in case of inline)\nor the document proto (in case of document) but here followed by\nexactly one\n<a href=\"https:\n\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto\"><code>google.rpc.Status<\/code><\/a>\ncontaining only <code>code<\/code> and <code>message<\/code>.<\/li>\n<\/ul><\/li>\n<li>For Tables:\nOutput depends on whether\n[gcs_destination][google.cloud.automl.v1beta1.BatchPredictOutputConfig.gcs_destination]\nor\n[bigquery_destination][google.cloud.automl.v1beta1.BatchPredictOutputConfig.bigquery_destination]\nis set (either is allowed).\nGCS case:\nIn the created directory files <code>tables_1.csv<\/code>, <code>tables_2.csv<\/code>,...,\n<code>tables_N.csv<\/code> will be created, where N may be 1, and depends on\nthe total number of the successfully predicted rows.\nFor all CLASSIFICATION\n[prediction_type-s][google.cloud.automl.v1beta1.TablesModelMetadata.prediction_type]:\nEach .csv file will contain a header, listing all columns'\n[display_name-s][google.cloud.automl.v1beta1.ColumnSpec.display_name]\ngiven on input followed by M target column names in the format of\n&quot;&lt;[target_column_specs][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]\n[display_name][google.cloud.automl.v1beta1.ColumnSpec.display<em>name]&gt;<\/em>&lt;target\nvalue&gt;_score&quot; where M is the number of distinct target values,\ni.e. number of distinct values in the target column of the table\nused to train the model. Subsequent lines will contain the\nrespective values of successfully predicted rows, with the last,\ni.e. the target, columns having the corresponding prediction\n[scores][google.cloud.automl.v1beta1.TablesAnnotation.score].\nFor REGRESSION and FORECASTING\n[prediction_type-s][google.cloud.automl.v1beta1.TablesModelMetadata.prediction_type]:\nEach .csv file will contain a header, listing all columns'\n[display_name-s][google.cloud.automl.v1beta1.display<em>name] given\non input followed by the predicted target column with name in the\nformat of\n&quot;predicted<\/em>&lt;[target_column_specs][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]\n[display_name][google.cloud.automl.v1beta1.ColumnSpec.display_name]&gt;&quot;\nSubsequent lines will contain the respective values of\nsuccessfully predicted rows, with the last, i.e. the target,\ncolumn having the predicted target value.\nIf prediction for any rows failed, then an additional\n<code>errors_1.csv<\/code>, <code>errors_2.csv<\/code>,..., <code>errors_N.csv<\/code> will be\ncreated (N depends on total number of failed rows). These files\nwill have analogous format as <code>tables_*.csv<\/code>, but always with a\nsingle target column having\n<a href=\"https:\n\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto\"><code>google.rpc.Status<\/code><\/a>\nrepresented as a JSON string, and containing only <code>code<\/code> and\n<code>message<\/code>.\nBigQuery case:\n[bigquery_destination][google.cloud.automl.v1beta1.OutputConfig.bigquery<em>destination]\npointing to a BigQuery project must be set. In the given project a\nnew dataset will be created with name\n`prediction<\/em><model-display-name>_<timestamp-of-prediction-call><code> where &lt;model-display-name&gt; will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores), and timestamp will be in YYYY_MM_DDThh_mm_ss_sssZ \"based on ISO-8601\" format. In the dataset two tables will be created,<\/code>predictions<code>, and<\/code>errors<code>. The<\/code>predictions<code>table's column names will be the input columns' [display_name-s][google.cloud.automl.v1beta1.ColumnSpec.display_name] followed by the target column with name in the format of \"predicted_&lt;[target_column_specs][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec] [display_name][google.cloud.automl.v1beta1.ColumnSpec.display_name]&gt;\" The input feature columns will contain the respective values of successfully predicted rows, with the target column having an ARRAY of [AnnotationPayloads][google.cloud.automl.v1beta1.AnnotationPayload], represented as STRUCT-s, containing [TablesAnnotation][google.cloud.automl.v1beta1.TablesAnnotation]. The<\/code>errors<code>table contains rows for which the prediction has failed, it has analogous input columns while the target column name is in the format of \"errors_&lt;[target_column_specs][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec] [display_name][google.cloud.automl.v1beta1.ColumnSpec.display_name]&gt;\", and as a value has [<\/code>google.rpc.Status<code>](https: \/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/rpc\/status.proto) represented as a STRUCT, and containing only<\/code>code<code>and<\/code>message`.<\/li>\n<\/ul>\n<p>Generated from protobuf message <code>google.cloud.automl.v1beta1.BatchPredictOutputConfig<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"AutoMl\/src\/V1beta1\/BatchPredictOutputConfig.php#L273","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.gcs_destination\n","description":"<p>The Google Cloud Storage location of the directory where the output is to be written to.<\/p>","types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/gcsdestination\">Google\\Cloud\\AutoMl\\V1beta1\\GcsDestination<\/a>"],"optional":null,"nullable":null},{"name":"data.bigquery_destination\n","description":"<p>The BigQuery location where the output is to be written to.<\/p>","types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/bigquerydestination\">Google\\Cloud\\AutoMl\\V1beta1\\BigQueryDestination<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getGcsDestination","type":"instance","name":"getGcsDestination","source":"AutoMl\/src\/V1beta1\/BatchPredictOutputConfig.php#L285","description":"<p>The Google Cloud Storage location of the directory where the output is to\nbe written to.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.automl.v1beta1.GcsDestination gcs_destination = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/gcsdestination\">Google\\Cloud\\AutoMl\\V1beta1\\GcsDestination<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setGcsDestination","type":"instance","name":"setGcsDestination","source":"AutoMl\/src\/V1beta1\/BatchPredictOutputConfig.php#L303","description":"<p>The Google Cloud Storage location of the directory where the output is to\nbe written to.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.automl.v1beta1.GcsDestination gcs_destination = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The Google Cloud Storage location of the directory where the output is to\nbe written to.<\/p>\n","types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/gcsdestination\">Google\\Cloud\\AutoMl\\V1beta1\\GcsDestination<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/batchpredictoutputconfig\">Google\\Cloud\\AutoMl\\V1beta1\\BatchPredictOutputConfig<\/a>"],"description":""}]},{"id":"getBigqueryDestination","type":"instance","name":"getBigqueryDestination","source":"AutoMl\/src\/V1beta1\/BatchPredictOutputConfig.php#L317","description":"<p>The BigQuery location where the output is to be written to.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.automl.v1beta1.BigQueryDestination bigquery_destination = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/bigquerydestination\">Google\\Cloud\\AutoMl\\V1beta1\\BigQueryDestination<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setBigqueryDestination","type":"instance","name":"setBigqueryDestination","source":"AutoMl\/src\/V1beta1\/BatchPredictOutputConfig.php#L334","description":"<p>The BigQuery location where the output is to be written to.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.automl.v1beta1.BigQueryDestination bigquery_destination = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The BigQuery location where the output is to be written to.<\/p>\n","types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/bigquerydestination\">Google\\Cloud\\AutoMl\\V1beta1\\BigQueryDestination<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1beta1\/batchpredictoutputconfig\">Google\\Cloud\\AutoMl\\V1beta1\\BatchPredictOutputConfig<\/a>"],"description":""}]},{"id":"getDestination","type":"instance","name":"getDestination","source":"AutoMl\/src\/V1beta1\/BatchPredictOutputConfig.php#L345","description":"","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]}]}