{"id":"automl\/v1\/inputconfig","type":"","title":"Google\\Cloud\\AutoMl\\V1\\InputConfig","name":"InputConfig","description":"<p>Input configuration for [AutoMl.ImportData][google.cloud.automl.v1.AutoMl.ImportData] action.<\/p>\n<p>The format of input depends on dataset_metadata the Dataset into which\nthe import is happening has. As input source the\n[gcs_source][google.cloud.automl.v1.InputConfig.gcs_source]\nis expected, unless specified otherwise. Additionally any input .CSV file\nby itself must be 100MB or smaller, unless specified otherwise.\nIf an &quot;example&quot; file (that is, image, video etc.) with identical content\n(even if it had different <code>GCS_FILE_PATH<\/code>) is mentioned multiple times, then\nits label, bounding boxes etc. are appended. The same file should be always\nprovided with the same <code>ML_USE<\/code> and <code>GCS_FILE_PATH<\/code>, if it is not, then\nthese values are nondeterministically selected from the given ones.\nThe formats are represented in EBNF with commas being literal and with\nnon-terminal symbols defined near the end of this comment. The formats are:<\/p>\n<h4>AutoML Vision<\/h4>\n<div class=\"ds-selector-tabs\"><section><h5>Classification<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/vision\/automl\/docs\/prepare) for more\ninformation.\nCSV file(s) with each line in format:\n    ML_USE,GCS_FILE_PATH,LABEL,LABEL,...\n*   `ML_USE` - Identifies the data set that the current row (file) applies\nto.\n    This value can be one of the following:\n    * `TRAIN` - Rows in this file are used to train the model.\n    * `TEST` - Rows in this file are used to test the model during training.\n    * `UNASSIGNED` - Rows in this file are not categorized. They are\n       Automatically divided into train and test data. 80% for training and\n       20% for testing.\n*   `GCS_FILE_PATH` - The Google Cloud Storage location of an image of up to\n     30MB in size. Supported extensions: .JPEG, .GIF, .PNG, .WEBP, .BMP,\n     .TIFF, .ICO.\n*   `LABEL` - A label that identifies the object in the image.\nFor the `MULTICLASS` classification type, at most one `LABEL` is allowed\nper image. If an image has not yet been labeled, then it should be\nmentioned just once with no `LABEL`.\nSome sample rows:\n    TRAIN,gs:\/\/folder\/image1.jpg,daisy\n    TEST,gs:\/\/folder\/image2.jpg,dandelion,tulip,rose\n    UNASSIGNED,gs:\/\/folder\/image3.jpg,daisy\n    UNASSIGNED,gs:\/\/folder\/image4.jpg\n<\/section><section><h5>Object Detection<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/vision\/automl\/object-detection\/docs\/prepare)\nfor more information.\nA CSV file(s) with each line in format:\n    ML_USE,GCS_FILE_PATH,[LABEL],(BOUNDING_BOX | ,,,,,,,)\n*   `ML_USE` - Identifies the data set that the current row (file) applies\nto.\n    This value can be one of the following:\n    * `TRAIN` - Rows in this file are used to train the model.\n    * `TEST` - Rows in this file are used to test the model during training.\n    * `UNASSIGNED` - Rows in this file are not categorized. They are\n       Automatically divided into train and test data. 80% for training and\n       20% for testing.\n*  `GCS_FILE_PATH` - The Google Cloud Storage location of an image of up to\n    30MB in size. Supported extensions: .JPEG, .GIF, .PNG. Each image\n    is assumed to be exhaustively labeled.\n*  `LABEL` - A label that identifies the object in the image specified by the\n   `BOUNDING_BOX`.\n*  `BOUNDING BOX` - The vertices of an object in the example image.\n   The minimum allowed `BOUNDING_BOX` edge length is 0.01, and no more than\n   500 `BOUNDING_BOX` instances per image are allowed (one `BOUNDING_BOX`\n   per line). If an image has no looked for objects then it should be\n   mentioned just once with no LABEL and the \",,,,,,,\" in place of the\n  `BOUNDING_BOX`.\n**Four sample rows:**\n    TRAIN,gs:\/\/folder\/image1.png,car,0.1,0.1,,,0.3,0.3,,\n    TRAIN,gs:\/\/folder\/image1.png,bike,.7,.6,,,.8,.9,,\n    UNASSIGNED,gs:\/\/folder\/im2.png,car,0.1,0.1,0.2,0.1,0.2,0.3,0.1,0.3\n    TEST,gs:\/\/folder\/im3.png,,,,,,,,,\n  <\/section>\n<\/div>\n<h4>AutoML Video Intelligence<\/h4>\n<div class=\"ds-selector-tabs\"><section><h5>Classification<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/video-intelligence\/automl\/docs\/prepare) for\nmore information.\nCSV file(s) with each line in format:\n    ML_USE,GCS_FILE_PATH\nFor `ML_USE`, do not use `VALIDATE`.\n`GCS_FILE_PATH` is the path to another .csv file that describes training\nexample for a given `ML_USE`, using the following row format:\n    GCS_FILE_PATH,(LABEL,TIME_SEGMENT_START,TIME_SEGMENT_END | ,,)\nHere `GCS_FILE_PATH` leads to a video of up to 50GB in size and up\nto 3h duration. Supported extensions: .MOV, .MPEG4, .MP4, .AVI.\n`TIME_SEGMENT_START` and `TIME_SEGMENT_END` must be within the\nlength of the video, and the end time must be after the start time. Any\nsegment of a video which has one or more labels on it, is considered a\nhard negative for all other labels. Any segment with no labels on\nit is considered to be unknown. If a whole video is unknown, then\nit should be mentioned just once with \",,\" in place of `LABEL,\nTIME_SEGMENT_START,TIME_SEGMENT_END`.\nSample top level CSV file:\n    TRAIN,gs:\/\/folder\/train_videos.csv\n    TEST,gs:\/\/folder\/test_videos.csv\n    UNASSIGNED,gs:\/\/folder\/other_videos.csv\nSample rows of a CSV file for a particular ML_USE:\n    gs:\/\/folder\/video1.avi,car,120,180.000021\n    gs:\/\/folder\/video1.avi,bike,150,180.000021\n    gs:\/\/folder\/vid2.avi,car,0,60.5\n    gs:\/\/folder\/vid3.avi,,,\n<\/section><section><h5>Object Tracking<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/video-intelligence\/automl\/object-tracking\/docs\/prepare) for more\ninformation.\nCSV file(s) with each line in format:\n    ML_USE,GCS_FILE_PATH\nFor `ML_USE`, do not use `VALIDATE`.\n`GCS_FILE_PATH` is the path to another .csv file that describes training\nexample for a given `ML_USE`, using the following row format:\n    GCS_FILE_PATH,LABEL,[INSTANCE_ID],TIMESTAMP,BOUNDING_BOX\nor\n    GCS_FILE_PATH,,,,,,,,,,\nHere `GCS_FILE_PATH` leads to a video of up to 50GB in size and up\nto 3h duration. Supported extensions: .MOV, .MPEG4, .MP4, .AVI.\nProviding `INSTANCE_ID`s can help to obtain a better model. When\na specific labeled entity leaves the video frame, and shows up\nafterwards it is not required, albeit preferable, that the same\n`INSTANCE_ID` is given to it.\n`TIMESTAMP` must be within the length of the video, the\n`BOUNDING_BOX` is assumed to be drawn on the closest video's frame\nto the `TIMESTAMP`. Any mentioned by the `TIMESTAMP` frame is expected\nto be exhaustively labeled and no more than 500 `BOUNDING_BOX`-es per\nframe are allowed. If a whole video is unknown, then it should be\nmentioned just once with \",,,,,,,,,,\" in place of `LABEL,\n[INSTANCE_ID],TIMESTAMP,BOUNDING_BOX`.\nSample top level CSV file:\n     TRAIN,gs:\/\/folder\/train_videos.csv\n     TEST,gs:\/\/folder\/test_videos.csv\n     UNASSIGNED,gs:\/\/folder\/other_videos.csv\nSeven sample rows of a CSV file for a particular ML_USE:\n     gs:\/\/folder\/video1.avi,car,1,12.10,0.8,0.8,0.9,0.8,0.9,0.9,0.8,0.9\n     gs:\/\/folder\/video1.avi,car,1,12.90,0.4,0.8,0.5,0.8,0.5,0.9,0.4,0.9\n     gs:\/\/folder\/video1.avi,car,2,12.10,.4,.2,.5,.2,.5,.3,.4,.3\n     gs:\/\/folder\/video1.avi,car,2,12.90,.8,.2,,,.9,.3,,\n     gs:\/\/folder\/video1.avi,bike,,12.50,.45,.45,,,.55,.55,,\n     gs:\/\/folder\/video2.avi,car,1,0,.1,.9,,,.9,.1,,\n     gs:\/\/folder\/video2.avi,,,,,,,,,,,\n  <\/section>\n<\/div>\n<h4>AutoML Natural Language<\/h4>\n<div class=\"ds-selector-tabs\"><section><h5>Entity Extraction<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/natural-language\/automl\/entity-analysis\/docs\/prepare) for more\ninformation.\nOne or more CSV file(s) with each line in the following format:\n    ML_USE,GCS_FILE_PATH\n*   `ML_USE` - Identifies the data set that the current row (file) applies\nto.\n    This value can be one of the following:\n    * `TRAIN` - Rows in this file are used to train the model.\n    * `TEST` - Rows in this file are used to test the model during training.\n    * `UNASSIGNED` - Rows in this file are not categorized. They are\n       Automatically divided into train and test data. 80% for training and\n       20% for testing..\n*   `GCS_FILE_PATH` - a Identifies JSON Lines (.JSONL) file stored in\n     Google Cloud Storage that contains in-line text in-line as documents\n     for model training.\nAfter the training data set has been determined from the `TRAIN` and\n`UNASSIGNED` CSV files, the training data is divided into train and\nvalidation data sets. 70% for training and 30% for validation.\nFor example:\n    TRAIN,gs:\/\/folder\/file1.jsonl\n    VALIDATE,gs:\/\/folder\/file2.jsonl\n    TEST,gs:\/\/folder\/file3.jsonl\n**In-line JSONL files**\nIn-line .JSONL files contain, per line, a JSON document that wraps a\n[`text_snippet`][google.cloud.automl.v1.TextSnippet] field followed by\none or more [`annotations`][google.cloud.automl.v1.AnnotationPayload]\nfields, which have `display_name` and `text_extraction` fields to describe\nthe entity from the text snippet. Multiple JSON documents can be separated\nusing line breaks (\\n).\nThe supplied text must be annotated exhaustively. For example, if you\ninclude the text \"horse\", but do not label it as \"animal\",\nthen \"horse\" is assumed to not be an \"animal\".\nAny given text snippet content must have 30,000 characters or\nless, and also be UTF-8 NFC encoded. ASCII is accepted as it is\nUTF-8 NFC encoded.\nFor example:\n    {\n      \"text_snippet\": {\n        \"content\": \"dog car cat\"\n      },\n      \"annotations\": [\n         {\n           \"display_name\": \"animal\",\n           \"text_extraction\": {\n             \"text_segment\": {\"start_offset\": 0, \"end_offset\": 2}\n          }\n         },\n         {\n          \"display_name\": \"vehicle\",\n           \"text_extraction\": {\n             \"text_segment\": {\"start_offset\": 4, \"end_offset\": 6}\n           }\n         },\n         {\n           \"display_name\": \"animal\",\n           \"text_extraction\": {\n             \"text_segment\": {\"start_offset\": 8, \"end_offset\": 10}\n           }\n         }\n     ]\n    }\\n\n    {\n       \"text_snippet\": {\n         \"content\": \"This dog is good.\"\n       },\n       \"annotations\": [\n          {\n            \"display_name\": \"animal\",\n            \"text_extraction\": {\n              \"text_segment\": {\"start_offset\": 5, \"end_offset\": 7}\n            }\n          }\n       ]\n    }\n**JSONL files that reference documents**\n.JSONL files contain, per line, a JSON document that wraps a\n`input_config` that contains the path to a source document.\nMultiple JSON documents can be separated using line breaks (\\n).\nSupported document extensions: .PDF, .TIF, .TIFF\nFor example:\n    {\n      \"document\": {\n        \"input_config\": {\n          \"gcs_source\": { \"input_uris\": [ \"gs:\/\/folder\/document1.pdf\" ]\n          }\n        }\n      }\n    }\\n\n    {\n      \"document\": {\n        \"input_config\": {\n          \"gcs_source\": { \"input_uris\": [ \"gs:\/\/folder\/document2.tif\" ]\n          }\n        }\n      }\n    }\n**In-line JSONL files with document layout information**\n**Note:** You can only annotate documents using the UI. The format described\nbelow applies to annotated documents exported using the UI or `exportData`.\nIn-line .JSONL files for documents contain, per line, a JSON document\nthat wraps a `document` field that provides the textual content of the\ndocument and the layout information.\nFor example:\n    {\n      \"document\": {\n              \"document_text\": {\n                \"content\": \"dog car cat\"\n              }\n              \"layout\": [\n                {\n                  \"text_segment\": {\n                    \"start_offset\": 0,\n                    \"end_offset\": 11,\n                   },\n                   \"page_number\": 1,\n                   \"bounding_poly\": {\n                      \"normalized_vertices\": [\n                        {\"x\": 0.1, \"y\": 0.1},\n                        {\"x\": 0.1, \"y\": 0.3},\n                        {\"x\": 0.3, \"y\": 0.3},\n                        {\"x\": 0.3, \"y\": 0.1},\n                      ],\n                    },\n                    \"text_segment_type\": TOKEN,\n                }\n              ],\n              \"document_dimensions\": {\n                \"width\": 8.27,\n                \"height\": 11.69,\n                \"unit\": INCH,\n              }\n              \"page_count\": 3,\n            },\n            \"annotations\": [\n              {\n                \"display_name\": \"animal\",\n                \"text_extraction\": {\n                  \"text_segment\": {\"start_offset\": 0, \"end_offset\": 3}\n                }\n              },\n              {\n                \"display_name\": \"vehicle\",\n                \"text_extraction\": {\n                  \"text_segment\": {\"start_offset\": 4, \"end_offset\": 7}\n                }\n              },\n              {\n                \"display_name\": \"animal\",\n                \"text_extraction\": {\n                  \"text_segment\": {\"start_offset\": 8, \"end_offset\": 11}\n                }\n              },\n            ],\n<\/section><section><h5>Classification<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/natural-language\/automl\/docs\/prepare) for more\ninformation.\nOne or more CSV file(s) with each line in the following format:\n    ML_USE,(TEXT_SNIPPET | GCS_FILE_PATH),LABEL,LABEL,...\n*   `ML_USE` - Identifies the data set that the current row (file) applies\nto.\n    This value can be one of the following:\n    * `TRAIN` - Rows in this file are used to train the model.\n    * `TEST` - Rows in this file are used to test the model during training.\n    * `UNASSIGNED` - Rows in this file are not categorized. They are\n       Automatically divided into train and test data. 80% for training and\n       20% for testing.\n*   `TEXT_SNIPPET` and `GCS_FILE_PATH` are distinguished by a pattern. If\n    the column content is a valid Google Cloud Storage file path, that is,\n    prefixed by \"gs:\/\/\", it is treated as a `GCS_FILE_PATH`. Otherwise, if\n    the content is enclosed in double quotes (\"\"), it is treated as a\n    `TEXT_SNIPPET`. For `GCS_FILE_PATH`, the path must lead to a\n    file with supported extension and UTF-8 encoding, for example,\n    \"gs:\/\/folder\/content.txt\" AutoML imports the file content\n    as a text snippet. For `TEXT_SNIPPET`, AutoML imports the column content\n    excluding quotes. In both cases, size of the content must be 10MB or\n    less in size. For zip files, the size of each file inside the zip must be\n    10MB or less in size.\n    For the `MULTICLASS` classification type, at most one `LABEL` is allowed.\n    The `ML_USE` and `LABEL` columns are optional.\n    Supported file extensions: .TXT, .PDF, .TIF, .TIFF, .ZIP\nA maximum of 100 unique labels are allowed per CSV row.\nSample rows:\n    TRAIN,\"They have bad food and very rude\",RudeService,BadFood\n    gs:\/\/folder\/content.txt,SlowService\n    TEST,gs:\/\/folder\/document.pdf\n    VALIDATE,gs:\/\/folder\/text_files.zip,BadFood\n<\/section><section><h5>Sentiment Analysis<\/h5>\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/natural-language\/automl\/docs\/prepare) for more\ninformation.\nCSV file(s) with each line in format:\n    ML_USE,(TEXT_SNIPPET | GCS_FILE_PATH),SENTIMENT\n*   `ML_USE` - Identifies the data set that the current row (file) applies\nto.\n    This value can be one of the following:\n    * `TRAIN` - Rows in this file are used to train the model.\n    * `TEST` - Rows in this file are used to test the model during training.\n    * `UNASSIGNED` - Rows in this file are not categorized. They are\n       Automatically divided into train and test data. 80% for training and\n       20% for testing.\n*   `TEXT_SNIPPET` and `GCS_FILE_PATH` are distinguished by a pattern. If\n    the column content is a valid  Google Cloud Storage file path, that is,\n    prefixed by \"gs:\/\/\", it is treated as a `GCS_FILE_PATH`. Otherwise, if\n    the content is enclosed in double quotes (\"\"), it is treated as a\n    `TEXT_SNIPPET`. For `GCS_FILE_PATH`, the path must lead to a\n    file with supported extension and UTF-8 encoding, for example,\n    \"gs:\/\/folder\/content.txt\" AutoML imports the file content\n    as a text snippet. For `TEXT_SNIPPET`, AutoML imports the column content\n    excluding quotes. In both cases, size of the content must be 128kB or\n    less in size. For zip files, the size of each file inside the zip must be\n    128kB or less in size.\n    The `ML_USE` and `SENTIMENT` columns are optional.\n    Supported file extensions: .TXT, .PDF, .TIF, .TIFF, .ZIP\n*  `SENTIMENT` - An integer between 0 and\n    Dataset.text_sentiment_dataset_metadata.sentiment_max\n    (inclusive). Describes the ordinal of the sentiment - higher\n    value means a more positive sentiment. All the values are\n    completely relative, i.e. neither 0 needs to mean a negative or\n    neutral sentiment nor sentiment_max needs to mean a positive one -\n    it is just required that 0 is the least positive sentiment\n    in the data, and sentiment_max is the  most positive one.\n    The SENTIMENT shouldn't be confused with \"score\" or \"magnitude\"\n    from the previous Natural Language Sentiment Analysis API.\n    All SENTIMENT values between 0 and sentiment_max must be\n    represented in the imported data. On prediction the same 0 to\n    sentiment_max range will be used. The difference between\n    neighboring sentiment values needs not to be uniform, e.g. 1 and\n    2 may be similar whereas the difference between 2 and 3 may be\n    large.\nSample rows:\n    TRAIN,\"&#64;freewrytin this is way too good for your product\",2\n    gs:\/\/folder\/content.txt,3\n    TEST,gs:\/\/folder\/document.pdf\n    VALIDATE,gs:\/\/folder\/text_files.zip,2\n  <\/section>\n<\/div>\n<h4>AutoML Tables<\/h4><div class=\"ui-datasection-main\"><section\nclass=\"selected\">\nSee [Preparing your training\ndata](https:\/\/cloud.google.com\/automl-tables\/docs\/prepare) for more\ninformation.\nYou can use either\n[gcs_source][google.cloud.automl.v1.InputConfig.gcs_source] or\n[bigquery_source][google.cloud.automl.v1.InputConfig.bigquery_source].\nAll input is concatenated into a\nsingle\n[primary_table_spec_id][google.cloud.automl.v1.TablesDatasetMetadata.primary_table_spec_id]\n**For gcs_source:**\nCSV file(s), where the first row of the first file is the header,\ncontaining unique column names. If the first row of a subsequent\nfile is the same as the header, then it is also treated as a\nheader. All other rows contain values for the corresponding\ncolumns.\nEach .CSV file by itself must be 10GB or smaller, and their total\nsize must be 100GB or smaller.\nFirst three sample rows of a CSV file:\n<pre>\n\"Id\",\"First Name\",\"Last Name\",\"Dob\",\"Addresses\"\n\"1\",\"John\",\"Doe\",\"1968-01-22\",\"[{\"status\":\"current\",\"address\":\"123_First_Avenue\",\"city\":\"Seattle\",\"state\":\"WA\",\"zip\":\"11111\",\"numberOfYears\":\"1\"},{\"status\":\"previous\",\"address\":\"456_Main_Street\",\"city\":\"Portland\",\"state\":\"OR\",\"zip\":\"22222\",\"numberOfYears\":\"5\"}]\"\n\"2\",\"Jane\",\"Doe\",\"1980-10-16\",\"[{\"status\":\"current\",\"address\":\"789_Any_Avenue\",\"city\":\"Albany\",\"state\":\"NY\",\"zip\":\"33333\",\"numberOfYears\":\"2\"},{\"status\":\"previous\",\"address\":\"321_Main_Street\",\"city\":\"Hoboken\",\"state\":\"NJ\",\"zip\":\"44444\",\"numberOfYears\":\"3\"}]}\n<\/pre>\n**For bigquery_source:**\nAn URI of a BigQuery table. The user data size of the BigQuery\ntable must be 100GB or smaller.\nAn imported table must have between 2 and 1,000 columns, inclusive,\nand between 1000 and 100,000,000 rows, inclusive. There are at most 5\nimport data running in parallel.\n  <\/section>\n<\/div>\n**Input field definitions:**\n`ML_USE`\n: (\"TRAIN\" | \"VALIDATE\" | \"TEST\" | \"UNASSIGNED\")\n  Describes how the given example (file) should be used for model\n  training. \"UNASSIGNED\" can be used when user has no preference.\n`GCS_FILE_PATH`\n: The path to a file on Google Cloud Storage. For example,\n  \"gs:\/\/folder\/image1.png\".\n`LABEL`\n: A display name of an object on an image, video etc., e.g. \"dog\".\n  Must be up to 32 characters long and can consist only of ASCII\n  Latin letters A-Z and a-z, underscores(_), and ASCII digits 0-9.\n  For each label an AnnotationSpec is created which display_name\n  becomes the label; AnnotationSpecs are given back in predictions.\n`INSTANCE_ID`\n: A positive integer that identifies a specific instance of a\n  labeled entity on an example. Used e.g. to track two cars on\n  a video while being able to tell apart which one is which.\n`BOUNDING_BOX`\n: (`VERTEX,VERTEX,VERTEX,VERTEX` | `VERTEX,,,VERTEX,,`)\n  A rectangle parallel to the frame of the example (image,\n  video). If 4 vertices are given they are connected by edges\n  in the order provided, if 2 are given they are recognized\n  as diagonally opposite vertices of the rectangle.\n`VERTEX`\n: (`COORDINATE,COORDINATE`)\n  First coordinate is horizontal (x), the second is vertical (y).\n`COORDINATE`\n: A float in 0 to 1 range, relative to total length of\n  image or video in given dimension. For fractions the\n  leading non-decimal 0 can be omitted (i.e. 0.3 = .3).\n  Point 0,0 is in top left.\n`TIME_SEGMENT_START`\n: (`TIME_OFFSET`)\n  Expresses a beginning, inclusive, of a time segment\n  within an example that has a time dimension\n  (e.g. video).\n`TIME_SEGMENT_END`\n: (`TIME_OFFSET`)\n  Expresses an end, exclusive, of a time segment within\n  n example that has a time dimension (e.g. video).\n`TIME_OFFSET`\n: A number of seconds as measured from the start of an\n  example (e.g. video). Fractions are allowed, up to a\n  microsecond precision. \"inf\" is allowed, and it means the end\n  of the example.\n`TEXT_SNIPPET`\n: The content of a text snippet, UTF-8 encoded, enclosed within\n  double quotes (\"\").\n`DOCUMENT`\n: A field that provides the textual content with document and the layout\n  information.\n **Errors:**\n If any of the provided CSV files can't be parsed or if more than certain\n percent of CSV rows cannot be processed then the operation fails and\n nothing is imported. Regardless of overall success or failure the per-row\n failures, up to a certain count cap, is listed in\n Operation.metadata.partial_failures.\n\nGenerated from protobuf message <code>google.cloud.automl.v1.InputConfig<\/code>\n\nExtends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"AutoMl\/src\/V1\/InputConfig.php#L526","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.gcs_source\n","description":"<p>The Google Cloud Storage location for the input content. For [AutoMl.ImportData][google.cloud.automl.v1.AutoMl.ImportData], <code>gcs_source<\/code> points to a CSV file with a structure described in [InputConfig][google.cloud.automl.v1.InputConfig].<\/p>","types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1\/gcssource\">Google\\Cloud\\AutoMl\\V1\\GcsSource<\/a>"],"optional":null,"nullable":null},{"name":"data.params\n","description":"<p>Additional domain-specific parameters describing the semantic of the imported data, any string must be up to 25000 characters long. <h4>AutoML Tables<\/h4> <code>schema_inference_version<\/code> : (integer) This value must be supplied. The version of the algorithm to use for the initial inference of the column data types of the imported table. Allowed values: &quot;1&quot;.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/MapField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\MapField<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getGcsSource","type":"instance","name":"getGcsSource","source":"AutoMl\/src\/V1\/InputConfig.php#L539","description":"<p>The Google Cloud Storage location for the input content.<\/p>\n<p>For [AutoMl.ImportData][google.cloud.automl.v1.AutoMl.ImportData], <code>gcs_source<\/code> points to a CSV file with\na structure described in [InputConfig][google.cloud.automl.v1.InputConfig].<\/p>\n<p>Generated from protobuf field <code>.google.cloud.automl.v1.GcsSource gcs_source = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1\/gcssource\">Google\\Cloud\\AutoMl\\V1\\GcsSource<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setGcsSource","type":"instance","name":"setGcsSource","source":"AutoMl\/src\/V1\/InputConfig.php#L558","description":"<p>The Google Cloud Storage location for the input content.<\/p>\n<p>For [AutoMl.ImportData][google.cloud.automl.v1.AutoMl.ImportData], <code>gcs_source<\/code> points to a CSV file with\na structure described in [InputConfig][google.cloud.automl.v1.InputConfig].<\/p>\n<p>Generated from protobuf field <code>.google.cloud.automl.v1.GcsSource gcs_source = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The Google Cloud Storage location for the input content.<\/p>\n<p>For [AutoMl.ImportData][google.cloud.automl.v1.AutoMl.ImportData], <code>gcs_source<\/code> points to a CSV file with\na structure described in [InputConfig][google.cloud.automl.v1.InputConfig].<\/p>\n","types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1\/gcssource\">Google\\Cloud\\AutoMl\\V1\\GcsSource<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1\/inputconfig\">Google\\Cloud\\AutoMl\\V1\\InputConfig<\/a>"],"description":""}]},{"id":"getParams","type":"instance","name":"getParams","source":"AutoMl\/src\/V1\/InputConfig.php#L580","description":"<p>Additional domain-specific parameters describing the semantic of the\nimported data, any string must be up to 25000\ncharacters long.<\/p>\n<h4>AutoML Tables<\/h4>\n<p><code>schema_inference_version<\/code>\n: (integer) This value must be supplied.\nThe version of the\nalgorithm to use for the initial inference of the\ncolumn data types of the imported table. Allowed values: &quot;1&quot;.<\/p>\n<p>Generated from protobuf field <code>map&lt;string, string&gt; params = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/MapField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\MapField<\/a>"],"description":""}]},{"id":"setParams","type":"instance","name":"setParams","source":"AutoMl\/src\/V1\/InputConfig.php#L600","description":"<p>Additional domain-specific parameters describing the semantic of the\nimported data, any string must be up to 25000\ncharacters long.<\/p>\n<h4>AutoML Tables<\/h4>\n<p><code>schema_inference_version<\/code>\n: (integer) This value must be supplied.\nThe version of the\nalgorithm to use for the initial inference of the\ncolumn data types of the imported table. Allowed values: &quot;1&quot;.<\/p>\n<p>Generated from protobuf field <code>map&lt;string, string&gt; params = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Additional domain-specific parameters describing the semantic of the\nimported data, any string must be up to 25000\ncharacters long.<\/p>\n<h4>AutoML Tables<\/h4>\n<p><code>schema_inference_version<\/code>\n: (integer) This value must be supplied.\nThe version of the\nalgorithm to use for the initial inference of the\ncolumn data types of the imported table. Allowed values: &quot;1&quot;.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/MapField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\MapField<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-automl\/main\/automl\/v1\/inputconfig\">Google\\Cloud\\AutoMl\\V1\\InputConfig<\/a>"],"description":""}]},{"id":"getSource","type":"instance","name":"getSource","source":"AutoMl\/src\/V1\/InputConfig.php#L611","description":"","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]}]}