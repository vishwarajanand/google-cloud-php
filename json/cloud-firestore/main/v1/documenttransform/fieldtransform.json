{"id":"firestore\/v1\/documenttransform\/fieldtransform","type":"","title":"Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform","name":"FieldTransform","description":"<p>A transformation of a field of the document.<\/p>\n<p>Generated from protobuf message <code>google.firestore.v1.DocumentTransform.FieldTransform<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L94","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.field_path\n","description":"<p>The path of the field. See [Document.fields][google.firestore.v1.Document.fields] for the field path syntax reference.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.set_to_server_value\n","description":"<p>Sets the field to the given server value.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null},{"name":"data.increment\n","description":"<p>Adds the given value to the field's current value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If either of the given value or the current field value are doubles, both values will be interpreted as doubles. Double arithmetic and representation of double values follow IEEE 754 semantics. If there is positive\/negative integer overflow, the field is resolved to the largest magnitude positive\/negative integer.<\/p>","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>"],"optional":null,"nullable":null},{"name":"data.maximum\n","description":"<p>Sets the field to the maximum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If a maximum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the larger operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and zero input value is always the stored value. The maximum of any numeric value x and NaN is NaN.<\/p>","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>"],"optional":null,"nullable":null},{"name":"data.minimum\n","description":"<p>Sets the field to the minimum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the input value. If a minimum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the smaller operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and zero input value is always the stored value. The minimum of any numeric value x and NaN is NaN.<\/p>","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>"],"optional":null,"nullable":null},{"name":"data.append_missing_elements\n","description":"<p>Append the given elements in order if they are not already present in the current field value. If the field is not an array, or if the field does not yet exist, it is first set to the empty array. Equivalent numbers of different types (e.g. 3L and 3.0) are considered equal when checking if a value is missing. NaN is equal to NaN, and Null is equal to Null. If the input contains multiple equivalent values, only the first will be considered. The corresponding transform_result will be the null value.<\/p>","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/arrayvalue\">Google\\Cloud\\Firestore\\V1\\ArrayValue<\/a>"],"optional":null,"nullable":null},{"name":"data.remove_all_from_array\n","description":"<p>Remove all of the given elements from the array in the field. If the field is not an array, or if the field does not yet exist, it is set to the empty array. Equivalent numbers of the different types (e.g. 3L and 3.0) are considered equal when deciding whether an element should be removed. NaN is equal to NaN, and Null is equal to Null. This will remove all equivalent values if there are duplicates. The corresponding transform_result will be the null value.<\/p>","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/arrayvalue\">Google\\Cloud\\Firestore\\V1\\ArrayValue<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getFieldPath","type":"instance","name":"getFieldPath","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L106","description":"<p>The path of the field. See [Document.fields][google.firestore.v1.Document.fields] for the field path syntax\nreference.<\/p>\n<p>Generated from protobuf field <code>string field_path = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setFieldPath","type":"instance","name":"setFieldPath","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L119","description":"<p>The path of the field. See [Document.fields][google.firestore.v1.Document.fields] for the field path syntax\nreference.<\/p>\n<p>Generated from protobuf field <code>string field_path = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The path of the field. See [Document.fields][google.firestore.v1.Document.fields] for the field path syntax\nreference.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getSetToServerValue","type":"instance","name":"getSetToServerValue","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L133","description":"<p>Sets the field to the given server value.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.DocumentTransform.FieldTransform.ServerValue set_to_server_value = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setSetToServerValue","type":"instance","name":"setSetToServerValue","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L150","description":"<p>Sets the field to the given server value.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.DocumentTransform.FieldTransform.ServerValue set_to_server_value = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Sets the field to the given server value.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getIncrement","type":"instance","name":"getIncrement","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L172","description":"<p>Adds the given value to the field's current value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf either of the given value or the current field value are doubles,\nboth values will be interpreted as doubles. Double arithmetic and\nrepresentation of double values follow IEEE 754 semantics.\nIf there is positive\/negative integer overflow, the field is resolved\nto the largest magnitude positive\/negative integer.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.Value increment = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setIncrement","type":"instance","name":"setIncrement","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L197","description":"<p>Adds the given value to the field's current value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf either of the given value or the current field value are doubles,\nboth values will be interpreted as doubles. Double arithmetic and\nrepresentation of double values follow IEEE 754 semantics.\nIf there is positive\/negative integer overflow, the field is resolved\nto the largest magnitude positive\/negative integer.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.Value increment = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Adds the given value to the field's current value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf either of the given value or the current field value are doubles,\nboth values will be interpreted as doubles. Double arithmetic and\nrepresentation of double values follow IEEE 754 semantics.\nIf there is positive\/negative integer overflow, the field is resolved\nto the largest magnitude positive\/negative integer.<\/p>\n","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getMaximum","type":"instance","name":"getMaximum","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L221","description":"<p>Sets the field to the maximum of its current value and the given value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf a maximum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the larger operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and\nzero input value is always the stored value.\nThe maximum of any numeric value x and NaN is NaN.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.Value maximum = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setMaximum","type":"instance","name":"setMaximum","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L248","description":"<p>Sets the field to the maximum of its current value and the given value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf a maximum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the larger operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and\nzero input value is always the stored value.\nThe maximum of any numeric value x and NaN is NaN.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.Value maximum = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Sets the field to the maximum of its current value and the given value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf a maximum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the larger operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and\nzero input value is always the stored value.\nThe maximum of any numeric value x and NaN is NaN.<\/p>\n","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getMinimum","type":"instance","name":"getMinimum","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L272","description":"<p>Sets the field to the minimum of its current value and the given value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the input value.\nIf a minimum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the smaller operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and\nzero input value is always the stored value.\nThe minimum of any numeric value x and NaN is NaN.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.Value minimum = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setMinimum","type":"instance","name":"setMinimum","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L299","description":"<p>Sets the field to the minimum of its current value and the given value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the input value.\nIf a minimum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the smaller operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and\nzero input value is always the stored value.\nThe minimum of any numeric value x and NaN is NaN.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.Value minimum = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Sets the field to the minimum of its current value and the given value.<\/p>\n<p>This must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the input value.\nIf a minimum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the smaller operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and\nzero input value is always the stored value.\nThe minimum of any numeric value x and NaN is NaN.<\/p>\n","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/value\">Google\\Cloud\\Firestore\\V1\\Value<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getAppendMissingElements","type":"instance","name":"getAppendMissingElements","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L322","description":"<p>Append the given elements in order if they are not already present in\nthe current field value.<\/p>\n<p>If the field is not an array, or if the field does not yet exist, it is\nfirst set to the empty array.\nEquivalent numbers of different types (e.g. 3L and 3.0) are\nconsidered equal when checking if a value is missing.\nNaN is equal to NaN, and Null is equal to Null.\nIf the input contains multiple equivalent values, only the first will\nbe considered.\nThe corresponding transform_result will be the null value.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.ArrayValue append_missing_elements = 6;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/arrayvalue\">Google\\Cloud\\Firestore\\V1\\ArrayValue<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setAppendMissingElements","type":"instance","name":"setAppendMissingElements","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L348","description":"<p>Append the given elements in order if they are not already present in\nthe current field value.<\/p>\n<p>If the field is not an array, or if the field does not yet exist, it is\nfirst set to the empty array.\nEquivalent numbers of different types (e.g. 3L and 3.0) are\nconsidered equal when checking if a value is missing.\nNaN is equal to NaN, and Null is equal to Null.\nIf the input contains multiple equivalent values, only the first will\nbe considered.\nThe corresponding transform_result will be the null value.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.ArrayValue append_missing_elements = 6;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Append the given elements in order if they are not already present in\nthe current field value.<\/p>\n<p>If the field is not an array, or if the field does not yet exist, it is\nfirst set to the empty array.\nEquivalent numbers of different types (e.g. 3L and 3.0) are\nconsidered equal when checking if a value is missing.\nNaN is equal to NaN, and Null is equal to Null.\nIf the input contains multiple equivalent values, only the first will\nbe considered.\nThe corresponding transform_result will be the null value.<\/p>\n","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/arrayvalue\">Google\\Cloud\\Firestore\\V1\\ArrayValue<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getRemoveAllFromArray","type":"instance","name":"getRemoveAllFromArray","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L369","description":"<p>Remove all of the given elements from the array in the field.<\/p>\n<p>If the field is not an array, or if the field does not yet exist, it is\nset to the empty array.\nEquivalent numbers of the different types (e.g. 3L and 3.0) are\nconsidered equal when deciding whether an element should be removed.\nNaN is equal to NaN, and Null is equal to Null.\nThis will remove all equivalent values if there are duplicates.\nThe corresponding transform_result will be the null value.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.ArrayValue remove_all_from_array = 7;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/arrayvalue\">Google\\Cloud\\Firestore\\V1\\ArrayValue<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setRemoveAllFromArray","type":"instance","name":"setRemoveAllFromArray","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L393","description":"<p>Remove all of the given elements from the array in the field.<\/p>\n<p>If the field is not an array, or if the field does not yet exist, it is\nset to the empty array.\nEquivalent numbers of the different types (e.g. 3L and 3.0) are\nconsidered equal when deciding whether an element should be removed.\nNaN is equal to NaN, and Null is equal to Null.\nThis will remove all equivalent values if there are duplicates.\nThe corresponding transform_result will be the null value.<\/p>\n<p>Generated from protobuf field <code>.google.firestore.v1.ArrayValue remove_all_from_array = 7;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Remove all of the given elements from the array in the field.<\/p>\n<p>If the field is not an array, or if the field does not yet exist, it is\nset to the empty array.\nEquivalent numbers of the different types (e.g. 3L and 3.0) are\nconsidered equal when deciding whether an element should be removed.\nNaN is equal to NaN, and Null is equal to Null.\nThis will remove all equivalent values if there are duplicates.\nThe corresponding transform_result will be the null value.<\/p>\n","types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/arrayvalue\">Google\\Cloud\\Firestore\\V1\\ArrayValue<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-firestore\/main\/firestore\/v1\/documenttransform\/fieldtransform\">Google\\Cloud\\Firestore\\V1\\DocumentTransform\\FieldTransform<\/a>"],"description":""}]},{"id":"getTransformType","type":"instance","name":"getTransformType","source":"Firestore\/src\/V1\/DocumentTransform\/FieldTransform.php#L404","description":"","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]}]}