{"id":"aiplatform\/v1\/searchfeaturesrequest","type":"","title":"Google\\Cloud\\AIPlatform\\V1\\SearchFeaturesRequest","name":"SearchFeaturesRequest","description":"<p>Request message for [FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures].<\/p>\n<p>Generated from protobuf message <code>google.cloud.aiplatform.v1.SearchFeaturesRequest<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L173","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.location\n","description":"<p>Required. The resource name of the Location to search Features. Format: <code>projects\/{project}\/locations\/{location}<\/code><\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.query\n","description":"<p>Query string that is a conjunction of field-restricted queries and\/or field-restricted filters. Field-restricted queries and filters can be combined using <code>AND<\/code> to form a conjunction. A field query is in the form FIELD:QUERY. This implicitly checks if QUERY exists as a substring within Feature's FIELD. The QUERY and the FIELD are converted to a sequence of words (i.e. tokens) for comparison. This is done by: <em> Removing leading\/trailing whitespace and tokenizing the search value. Characters that are not one of alphanumeric <code>[a-zA-Z0-9]<\/code>, underscore <code>_<\/code>, or asterisk `<\/em><code>are treated as delimiters for tokens.<\/code><em>` is treated as a wildcard that matches characters within a token. <\/em> Ignoring case. <em> Prepending an asterisk to the first and appending an asterisk to the last token in QUERY. A QUERY must be either a singular token or a phrase. A phrase is one or multiple words enclosed in double quotation marks (&quot;). With phrases, the order of the words is important. Words in the phrase must be matching in order and consecutively. Supported FIELDs for field-restricted queries: <\/em> <code>feature_id<\/code> <em> <code>description<\/code> <\/em> <code>entity_type_id<\/code> Examples: <em> <code>feature_id: foo<\/code> --&gt; Matches a Feature with ID containing the substring <code>foo<\/code> (eg. <code>foo<\/code>, <code>foofeature<\/code>, <code>barfoo<\/code>). <\/em> <code>feature_id: foo*feature<\/code> --&gt; Matches a Feature with ID containing the substring <code>foo*feature<\/code> (eg. <code>foobarfeature<\/code>). <em> <code>feature_id: foo AND description: bar<\/code> --&gt; Matches a Feature with ID containing the substring <code>foo<\/code> and description containing the substring <code>bar<\/code>. Besides field queries, the following exact-match filters are supported. The exact-match filters do not support wildcards. Unlike field-restricted queries, exact-match filters are case-sensitive. <\/em> <code>feature_id<\/code>: Supports = comparisons. <em> <code>description<\/code>: Supports = comparisons. Multi-token filters should be enclosed in quotes. <\/em> <code>entity_type_id<\/code>: Supports = comparisons. <em> <code>value_type<\/code>: Supports = and != comparisons. <\/em> <code>labels<\/code>: Supports key-value equality as well as key presence. <em> <code>featurestore_id<\/code>: Supports = comparisons. Examples: <\/em> <code>description = \"foo bar\"<\/code> --&gt; Any Feature with description exactly equal to <code>foo bar<\/code> <em> <code>value_type = DOUBLE<\/code> --&gt; Features whose type is DOUBLE. <\/em> <code>labels.active = yes AND labels.env = prod<\/code> --&gt; Features having both (active: yes) and (env: prod) labels. <em> `labels.env: <\/em><code>--&gt; Any Feature which has a label with<\/code>env` as the key.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.page_size\n","description":"<p>The maximum number of Features to return. The service may return fewer than this value. If unspecified, at most 100 Features will be returned. The maximum value is 100; any value greater than 100 will be coerced to 100.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null},{"name":"data.page_token\n","description":"<p>A page token, received from a previous [FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures] call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to [FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures], except <code>page_size<\/code>, must match the call that provided the page token.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getLocation","type":"instance","name":"getLocation","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L186","description":"<p>Required. The resource name of the Location to search Features.<\/p>\n<p>Format:\n<code>projects\/{project}\/locations\/{location}<\/code><\/p>\n<p>Generated from protobuf field <code>string location = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setLocation","type":"instance","name":"setLocation","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L200","description":"<p>Required. The resource name of the Location to search Features.<\/p>\n<p>Format:\n<code>projects\/{project}\/locations\/{location}<\/code><\/p>\n<p>Generated from protobuf field <code>string location = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Required. The resource name of the Location to search Features.<\/p>\n<p>Format:\n<code>projects\/{project}\/locations\/{location}<\/code><\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-ai-platform\/main\/aiplatform\/v1\/searchfeaturesrequest\">Google\\Cloud\\AIPlatform\\V1\\SearchFeaturesRequest<\/a>"],"description":""}]},{"id":"getQuery","type":"instance","name":"getQuery","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L261","description":"<p>Query string that is a conjunction of field-restricted queries and\/or\nfield-restricted filters.  Field-restricted queries and filters can be\ncombined using <code>AND<\/code> to form a conjunction.<\/p>\n<p>A field query is in the form FIELD:QUERY. This implicitly checks if QUERY\nexists as a substring within Feature's FIELD. The QUERY\nand the FIELD are converted to a sequence of words (i.e. tokens) for\ncomparison. This is done by:<\/p>\n<ul>\n<li>Removing leading\/trailing whitespace and tokenizing the search value.\nCharacters that are not one of alphanumeric <code>[a-zA-Z0-9]<\/code>, underscore\n<code>_<\/code>, or asterisk <code>*<\/code> are treated as delimiters for tokens. <code>*<\/code> is treated\nas a wildcard that matches characters within a token.<\/li>\n<li>Ignoring case.<\/li>\n<li>Prepending an asterisk to the first and appending an asterisk to the\nlast token in QUERY.\nA QUERY must be either a singular token or a phrase. A phrase is one or\nmultiple words enclosed in double quotation marks (&quot;). With phrases, the\norder of the words is important. Words in the phrase must be matching in\norder and consecutively.\nSupported FIELDs for field-restricted queries:\n<ul>\n<li><code>feature_id<\/code><\/li>\n<li><code>description<\/code><\/li>\n<li><code>entity_type_id<\/code>\nExamples:<\/li>\n<li><code>feature_id: foo<\/code> --&gt; Matches a Feature with ID containing the substring\n<code>foo<\/code> (eg. <code>foo<\/code>, <code>foofeature<\/code>, <code>barfoo<\/code>).<\/li>\n<li><code>feature_id: foo*feature<\/code> --&gt; Matches a Feature with ID containing the\nsubstring <code>foo*feature<\/code> (eg. <code>foobarfeature<\/code>).<\/li>\n<li><code>feature_id: foo AND description: bar<\/code> --&gt; Matches a Feature with ID\ncontaining the substring <code>foo<\/code> and description containing the substring\n<code>bar<\/code>.\nBesides field queries, the following exact-match filters are\nsupported. The exact-match filters do not support wildcards. Unlike\nfield-restricted queries, exact-match filters are case-sensitive.<\/li>\n<li><code>feature_id<\/code>: Supports = comparisons.<\/li>\n<li><code>description<\/code>: Supports = comparisons. Multi-token filters should be\nenclosed in quotes.<\/li>\n<li><code>entity_type_id<\/code>: Supports = comparisons.<\/li>\n<li><code>value_type<\/code>: Supports = and != comparisons.<\/li>\n<li><code>labels<\/code>: Supports key-value equality as well as key presence.<\/li>\n<li><code>featurestore_id<\/code>: Supports = comparisons.\nExamples:<\/li>\n<li><code>description = \"foo bar\"<\/code> --&gt; Any Feature with description exactly equal\nto <code>foo bar<\/code><\/li>\n<li><code>value_type = DOUBLE<\/code> --&gt; Features whose type is DOUBLE.<\/li>\n<li><code>labels.active = yes AND labels.env = prod<\/code> --&gt; Features having both\n(active: yes) and (env: prod) labels.<\/li>\n<li><code>labels.env: *<\/code> --&gt; Any Feature which has a label with <code>env<\/code> as the\nkey.<\/li>\n<\/ul><\/li>\n<\/ul>\n<p>Generated from protobuf field <code>string query = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setQuery","type":"instance","name":"setQuery","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L320","description":"<p>Query string that is a conjunction of field-restricted queries and\/or\nfield-restricted filters.  Field-restricted queries and filters can be\ncombined using <code>AND<\/code> to form a conjunction.<\/p>\n<p>A field query is in the form FIELD:QUERY. This implicitly checks if QUERY\nexists as a substring within Feature's FIELD. The QUERY\nand the FIELD are converted to a sequence of words (i.e. tokens) for\ncomparison. This is done by:<\/p>\n<ul>\n<li>Removing leading\/trailing whitespace and tokenizing the search value.\nCharacters that are not one of alphanumeric <code>[a-zA-Z0-9]<\/code>, underscore\n<code>_<\/code>, or asterisk <code>*<\/code> are treated as delimiters for tokens. <code>*<\/code> is treated\nas a wildcard that matches characters within a token.<\/li>\n<li>Ignoring case.<\/li>\n<li>Prepending an asterisk to the first and appending an asterisk to the\nlast token in QUERY.\nA QUERY must be either a singular token or a phrase. A phrase is one or\nmultiple words enclosed in double quotation marks (&quot;). With phrases, the\norder of the words is important. Words in the phrase must be matching in\norder and consecutively.\nSupported FIELDs for field-restricted queries:\n<ul>\n<li><code>feature_id<\/code><\/li>\n<li><code>description<\/code><\/li>\n<li><code>entity_type_id<\/code>\nExamples:<\/li>\n<li><code>feature_id: foo<\/code> --&gt; Matches a Feature with ID containing the substring\n<code>foo<\/code> (eg. <code>foo<\/code>, <code>foofeature<\/code>, <code>barfoo<\/code>).<\/li>\n<li><code>feature_id: foo*feature<\/code> --&gt; Matches a Feature with ID containing the\nsubstring <code>foo*feature<\/code> (eg. <code>foobarfeature<\/code>).<\/li>\n<li><code>feature_id: foo AND description: bar<\/code> --&gt; Matches a Feature with ID\ncontaining the substring <code>foo<\/code> and description containing the substring\n<code>bar<\/code>.\nBesides field queries, the following exact-match filters are\nsupported. The exact-match filters do not support wildcards. Unlike\nfield-restricted queries, exact-match filters are case-sensitive.<\/li>\n<li><code>feature_id<\/code>: Supports = comparisons.<\/li>\n<li><code>description<\/code>: Supports = comparisons. Multi-token filters should be\nenclosed in quotes.<\/li>\n<li><code>entity_type_id<\/code>: Supports = comparisons.<\/li>\n<li><code>value_type<\/code>: Supports = and != comparisons.<\/li>\n<li><code>labels<\/code>: Supports key-value equality as well as key presence.<\/li>\n<li><code>featurestore_id<\/code>: Supports = comparisons.\nExamples:<\/li>\n<li><code>description = \"foo bar\"<\/code> --&gt; Any Feature with description exactly equal\nto <code>foo bar<\/code><\/li>\n<li><code>value_type = DOUBLE<\/code> --&gt; Features whose type is DOUBLE.<\/li>\n<li><code>labels.active = yes AND labels.env = prod<\/code> --&gt; Features having both\n(active: yes) and (env: prod) labels.<\/li>\n<li><code>labels.env: *<\/code> --&gt; Any Feature which has a label with <code>env<\/code> as the\nkey.<\/li>\n<\/ul><\/li>\n<\/ul>\n<p>Generated from protobuf field <code>string query = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Query string that is a conjunction of field-restricted queries and\/or\nfield-restricted filters.  Field-restricted queries and filters can be\ncombined using <code>AND<\/code> to form a conjunction.<\/p>\n<p>A field query is in the form FIELD:QUERY. This implicitly checks if QUERY\nexists as a substring within Feature's FIELD. The QUERY\nand the FIELD are converted to a sequence of words (i.e. tokens) for\ncomparison. This is done by:<\/p>\n<ul>\n<li>Removing leading\/trailing whitespace and tokenizing the search value.\nCharacters that are not one of alphanumeric <code>[a-zA-Z0-9]<\/code>, underscore\n<code>_<\/code>, or asterisk <code>*<\/code> are treated as delimiters for tokens. <code>*<\/code> is treated\nas a wildcard that matches characters within a token.<\/li>\n<li>Ignoring case.<\/li>\n<li>Prepending an asterisk to the first and appending an asterisk to the\nlast token in QUERY.\nA QUERY must be either a singular token or a phrase. A phrase is one or\nmultiple words enclosed in double quotation marks (&quot;). With phrases, the\norder of the words is important. Words in the phrase must be matching in\norder and consecutively.\nSupported FIELDs for field-restricted queries:\n<ul>\n<li><code>feature_id<\/code><\/li>\n<li><code>description<\/code><\/li>\n<li><code>entity_type_id<\/code>\nExamples:<\/li>\n<li><code>feature_id: foo<\/code> --&gt; Matches a Feature with ID containing the substring\n<code>foo<\/code> (eg. <code>foo<\/code>, <code>foofeature<\/code>, <code>barfoo<\/code>).<\/li>\n<li><code>feature_id: foo*feature<\/code> --&gt; Matches a Feature with ID containing the\nsubstring <code>foo*feature<\/code> (eg. <code>foobarfeature<\/code>).<\/li>\n<li><code>feature_id: foo AND description: bar<\/code> --&gt; Matches a Feature with ID\ncontaining the substring <code>foo<\/code> and description containing the substring\n<code>bar<\/code>.\nBesides field queries, the following exact-match filters are\nsupported. The exact-match filters do not support wildcards. Unlike\nfield-restricted queries, exact-match filters are case-sensitive.<\/li>\n<li><code>feature_id<\/code>: Supports = comparisons.<\/li>\n<li><code>description<\/code>: Supports = comparisons. Multi-token filters should be\nenclosed in quotes.<\/li>\n<li><code>entity_type_id<\/code>: Supports = comparisons.<\/li>\n<li><code>value_type<\/code>: Supports = and != comparisons.<\/li>\n<li><code>labels<\/code>: Supports key-value equality as well as key presence.<\/li>\n<li><code>featurestore_id<\/code>: Supports = comparisons.\nExamples:<\/li>\n<li><code>description = \"foo bar\"<\/code> --&gt; Any Feature with description exactly equal\nto <code>foo bar<\/code><\/li>\n<li><code>value_type = DOUBLE<\/code> --&gt; Features whose type is DOUBLE.<\/li>\n<li><code>labels.active = yes AND labels.env = prod<\/code> --&gt; Features having both\n(active: yes) and (env: prod) labels.<\/li>\n<li><code>labels.env: *<\/code> --&gt; Any Feature which has a label with <code>env<\/code> as the\nkey.<\/li>\n<\/ul><\/li>\n<\/ul>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-ai-platform\/main\/aiplatform\/v1\/searchfeaturesrequest\">Google\\Cloud\\AIPlatform\\V1\\SearchFeaturesRequest<\/a>"],"description":""}]},{"id":"getPageSize","type":"instance","name":"getPageSize","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L337","description":"<p>The maximum number of Features to return. The service may return fewer\nthan this value. If unspecified, at most 100 Features will be returned.<\/p>\n<p>The maximum value is 100; any value greater than 100 will be coerced to\n100.<\/p>\n<p>Generated from protobuf field <code>int32 page_size = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"description":""}]},{"id":"setPageSize","type":"instance","name":"setPageSize","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L352","description":"<p>The maximum number of Features to return. The service may return fewer\nthan this value. If unspecified, at most 100 Features will be returned.<\/p>\n<p>The maximum value is 100; any value greater than 100 will be coerced to\n100.<\/p>\n<p>Generated from protobuf field <code>int32 page_size = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The maximum number of Features to return. The service may return fewer\nthan this value. If unspecified, at most 100 Features will be returned.<\/p>\n<p>The maximum value is 100; any value greater than 100 will be coerced to\n100.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-ai-platform\/main\/aiplatform\/v1\/searchfeaturesrequest\">Google\\Cloud\\AIPlatform\\V1\\SearchFeaturesRequest<\/a>"],"description":""}]},{"id":"getPageToken","type":"instance","name":"getPageToken","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L371","description":"<p>A page token, received from a previous\n[FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures] call.<\/p>\n<p>Provide this to retrieve the subsequent page.\nWhen paginating, all other parameters provided to\n[FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures], except <code>page_size<\/code>, must\nmatch the call that provided the page token.<\/p>\n<p>Generated from protobuf field <code>string page_token = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setPageToken","type":"instance","name":"setPageToken","source":"AiPlatform\/src\/V1\/SearchFeaturesRequest.php#L388","description":"<p>A page token, received from a previous\n[FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures] call.<\/p>\n<p>Provide this to retrieve the subsequent page.\nWhen paginating, all other parameters provided to\n[FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures], except <code>page_size<\/code>, must\nmatch the call that provided the page token.<\/p>\n<p>Generated from protobuf field <code>string page_token = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>A page token, received from a previous\n[FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures] call.<\/p>\n<p>Provide this to retrieve the subsequent page.\nWhen paginating, all other parameters provided to\n[FeaturestoreService.SearchFeatures][google.cloud.aiplatform.v1.FeaturestoreService.SearchFeatures], except <code>page_size<\/code>, must\nmatch the call that provided the page token.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-ai-platform\/main\/aiplatform\/v1\/searchfeaturesrequest\">Google\\Cloud\\AIPlatform\\V1\\SearchFeaturesRequest<\/a>"],"description":""}]}]}