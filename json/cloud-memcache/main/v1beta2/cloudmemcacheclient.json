{"id":"memcache\/v1beta2\/cloudmemcacheclient","type":"","title":"Google\\Cloud\\Memcache\\V1beta2\\CloudMemcacheClient","name":"CloudMemcacheClient","description":"<p>Service Description: Configures and manages Cloud Memorystore for Memcached instances.<\/p>\n<p>The <code>memcache.googleapis.com<\/code> service implements the Google Cloud Memorystore\nfor Memcached API and defines the following resource model for managing\nMemorystore Memcached (also called Memcached below) instances:<\/p>\n<ul>\n<li>The service works with a collection of cloud projects, named: <code>\/projects\/*<\/code><\/li>\n<li>Each project has a collection of available locations, named: <code>\/locations\/*<\/code><\/li>\n<li>Each location has a collection of Memcached instances, named:\n<code>\/instances\/*<\/code><\/li>\n<li>As such, Memcached instances are resources of the form:\n<code>\/projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}<\/code><\/li>\n<\/ul>\n<p>Note that location_id must be a GCP <code>region<\/code>; for example:<\/p>\n<ul>\n<li><code>projects\/my-memcached-project\/locations\/us-central1\/instances\/my-memcached<\/code><\/li>\n<\/ul>\n<p>This class provides the ability to make remote calls to the backing service through method\ncalls that map to API methods. Sample code to get started:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedName = $cloudMemcacheClient-&gt;instanceName('[PROJECT]', '[LOCATION]', '[INSTANCE]');\n    $operationResponse = $cloudMemcacheClient-&gt;applyParameters($formattedName);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        $result = $operationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;applyParameters($formattedName);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'applyParameters');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        $result = $newOperationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n<p>Many parameters require resource names to be formatted in a particular way. To\nassist with these names, this class includes a format method for each type of\nname, and additionally a parseName method to extract the individual identifiers\ncontained within formatted names that are returned by the API.<\/p>\n<p>Extends <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"instanceName","type":"instance","name":"instanceName","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L218","description":"<p>Formats a string containing the fully-qualified path to represent a instance\nresource.<\/p>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"project","description":"","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"location","description":"","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"instance","description":"","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":"<p>The formatted instance resource.<\/p>"}]},{"id":"locationName","type":"instance","name":"locationName","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L238","description":"<p>Formats a string containing the fully-qualified path to represent a location\nresource.<\/p>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"project","description":"","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"location","description":"","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":"<p>The formatted location resource.<\/p>"}]},{"id":"parseName","type":"instance","name":"parseName","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L268","description":"<p>Parses a formatted name string and returns an associative array of the components in the name.<\/p>\n<p>The following name formats are supported:\nTemplate: Pattern<\/p>\n<ul>\n<li>instance: projects\/{project}\/locations\/{location}\/instances\/{instance}<\/li>\n<li>location: projects\/{project}\/locations\/{location}<\/li>\n<\/ul>\n<p>The optional $template argument can be supplied to specify a particular pattern,\nand must match one of the templates listed above. If no $template argument is\nprovided, or if the $template argument does not match one of the templates\nlisted, then parseName will check each of the supported templates, and return\nthe first match.<\/p>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"formattedName","description":"<p>The formatted name string<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"template","description":"<p>Optional name of template to match<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ValidationException","description":"If $formattedName could not be matched."}],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"description":"<p>An associative array from name component IDs to component values.<\/p>"}]},{"id":"getOperationsClient","type":"instance","name":"getOperationsClient","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L297","description":"<p>Return an OperationsClient object with the same endpoint as $this.<\/p>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/LongRunning\/OperationsClient.html\" target=\"_blank\">Google\\ApiCore\\LongRunning\\OperationsClient<\/a>"],"description":""}]},{"id":"resumeOperation","type":"instance","name":"resumeOperation","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L315","description":"<p>Resume an existing long running operation that was previously started by a long\nrunning API method. If $methodName is not provided, or does not match a long\nrunning API method, then the operation can still be resumed, but the\nOperationResponse object will not deserialize the final response.<\/p>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"operationName","description":"<p>The name of the long running operation<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"methodName","description":"<p>The name of the method used to start the operation<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]},{"id":"__construct","type":"constructor","name":"__construct","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L382","description":"<p>Constructor.<\/p>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"options","description":"<p>Optional. Options for configuring the service API wrapper.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"options.serviceAddress\n","description":"<p><strong>Deprecated<\/strong>. This option will be removed in a future major release. Please utilize the <code>$apiEndpoint<\/code> option instead.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"options.apiEndpoint\n","description":"<p>The address of the API remote host. May optionally include the port, formatted as &quot;<uri>:<port>&quot;. Default 'memcache.googleapis.com:443'.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"options.credentials\n","description":"<p>The credentials to be used by the client to authorize API calls. This option accepts either a path to a credentials file, or a decoded credentials file as a PHP array. <em>Advanced usage<\/em>: In addition, this option can also accept a pre-constructed <a href=\"https:\/\/github.com\/googleapis\/google-auth-library-php\/tree\/v1.23.1\/src\/FetchAuthTokenInterface.php\" target=\"_blank\">Google\\Auth\\FetchAuthTokenInterface<\/a> object or <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/CredentialsWrapper.html\" target=\"_blank\">Google\\ApiCore\\CredentialsWrapper<\/a> object. Note that when one of these objects are provided, any settings in $credentialsConfig will be ignored.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>","<a href=\"https:\/\/github.com\/googleapis\/google-auth-library-php\/tree\/v1.23.1\/src\/FetchAuthTokenInterface.php\" target=\"_blank\">Google\\Auth\\FetchAuthTokenInterface<\/a>","<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/CredentialsWrapper.html\" target=\"_blank\">Google\\ApiCore\\CredentialsWrapper<\/a>"],"optional":null,"nullable":null},{"name":"options.credentialsConfig\n","description":"<p>Options used to configure credentials, including auth token caching, for the client. For a full list of supporting configuration options, see <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/CredentialsWrapper.html\" target=\"_blank\">Google\\ApiCore\\CredentialsWrapper::build()<\/a> .<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null},{"name":"options.disableRetries\n","description":"<p>Determines whether or not retries defined by the client configuration should be disabled. Defaults to <code>false<\/code>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null},{"name":"options.clientConfig\n","description":"<p>Client method configuration, including retry settings. This option can be either a path to a JSON file, or a PHP array containing the decoded JSON data. By default this settings points to the default client config file, which is provided in the resources folder.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null},{"name":"options.transport\n","description":"<p>The transport used for executing network requests. May be either the string <code>rest<\/code> or <code>grpc<\/code>. Defaults to <code>grpc<\/code> if gRPC support is detected on the system. <em>Advanced usage<\/em>: Additionally, it is possible to pass in an already instantiated <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/Transport\/TransportInterface.html\" target=\"_blank\">Google\\ApiCore\\Transport\\TransportInterface<\/a> object. Note that when this object is provided, any settings in $transportConfig, and any $serviceAddress setting, will be ignored.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>","<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/Transport\/TransportInterface.html\" target=\"_blank\">Google\\ApiCore\\Transport\\TransportInterface<\/a>"],"optional":null,"nullable":null},{"name":"options.transportConfig\n","description":"<p>Configuration options that will be used to construct the transport. Options for each supported transport type should be passed in a key for that transport. For example: $transportConfig = [ 'grpc' =&gt; [...], 'rest' =&gt; [...], ]; See the <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/Transport\/GrpcTransport.html\" target=\"_blank\">Google\\ApiCore\\Transport\\GrpcTransport::build()<\/a> and <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/Transport\/RestTransport.html\" target=\"_blank\">Google\\ApiCore\\Transport\\RestTransport::build()<\/a> methods for the supported options.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null},{"name":"options.clientCertSource\n","description":"<p>A callable which returns the client cert as a string. This can be used to provide a certificate and private key to the transport layer for mTLS.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.callable.php\" target=\"_blank\">callable<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ValidationException","description":""}],"returns":[]},{"id":"applyParameters","type":"instance","name":"applyParameters","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L452","description":"<p><code>ApplyParameters<\/code> restarts the set of specified nodes in order to update\nthem to the current set of parameters for the Memcached Instance.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedName = $cloudMemcacheClient-&gt;instanceName('[PROJECT]', '[LOCATION]', '[INSTANCE]');\n    $operationResponse = $cloudMemcacheClient-&gt;applyParameters($formattedName);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        $result = $operationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;applyParameters($formattedName);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'applyParameters');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        $result = $newOperationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"name","description":"<p>Required. Resource name of the Memcached instance for which parameter group updates\nshould be applied.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.nodeIds\n","description":"<p>Nodes to which the instance-level parameter group is applied.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string[]<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.applyAll\n","description":"<p>Whether to apply instance-level parameter group to all nodes. If set to true, users are restricted from specifying individual nodes, and <code>ApplyParameters<\/code> updates all nodes within the instance.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]},{"id":"applySoftwareUpdate","type":"instance","name":"applySoftwareUpdate","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L534","description":"<p>Updates software on the selected nodes of the Instance.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedInstance = $cloudMemcacheClient-&gt;instanceName('[PROJECT]', '[LOCATION]', '[INSTANCE]');\n    $operationResponse = $cloudMemcacheClient-&gt;applySoftwareUpdate($formattedInstance);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        $result = $operationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;applySoftwareUpdate($formattedInstance);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'applySoftwareUpdate');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        $result = $newOperationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"instance","description":"<p>Required. Resource name of the Memcached instance for which software update should be\napplied.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.nodeIds\n","description":"<p>Nodes to which we should apply the update to. Note all the selected nodes are updated in parallel.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string[]<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.applyAll\n","description":"<p>Whether to apply the update to all nodes. If set to true, will explicitly restrict users from specifying any nodes, and apply software update to all nodes (where applicable) within the instance.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]},{"id":"createInstance","type":"instance","name":"createInstance","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L623","description":"<p>Creates a new Instance in a given location.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedParent = $cloudMemcacheClient-&gt;locationName('[PROJECT]', '[LOCATION]');\n    $instanceId = 'instance_id';\n    $resource = new Instance();\n    $operationResponse = $cloudMemcacheClient-&gt;createInstance($formattedParent, $instanceId, $resource);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        $result = $operationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;createInstance($formattedParent, $instanceId, $resource);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'createInstance');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        $result = $newOperationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"parent","description":"<p>Required. The resource name of the instance location using the form:\n<code>projects\/{project_id}\/locations\/{location_id}<\/code>\nwhere <code>location_id<\/code> refers to a GCP region<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"instanceId","description":"<p>Required. The logical name of the Memcached instance in the user\nproject with the following restrictions:<\/p>\n<ul>\n<li>Must contain only lowercase letters, numbers, and hyphens.<\/li>\n<li>Must start with a letter.<\/li>\n<li>Must be between 1-40 characters.<\/li>\n<li>Must end with a number or a letter.<\/li>\n<li>Must be unique within the user project \/ location.<\/li>\n<\/ul>\n<p>If any of the above are not met, the API raises an invalid argument error.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"resource","description":"<p>Required. A Memcached [Instance] resource<\/p>","types":["<a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/instance\">Google\\Cloud\\Memcache\\V1beta2\\Instance<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]},{"id":"deleteInstance","type":"instance","name":"deleteInstance","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L691","description":"<p>Deletes a single Instance.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedName = $cloudMemcacheClient-&gt;instanceName('[PROJECT]', '[LOCATION]', '[INSTANCE]');\n    $operationResponse = $cloudMemcacheClient-&gt;deleteInstance($formattedName);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        \/\/ operation succeeded and returns no value\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;deleteInstance($formattedName);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'deleteInstance');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        \/\/ operation succeeded and returns no value\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"name","description":"<p>Required. Memcached instance resource name in the format:\n<code>projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}<\/code>\nwhere <code>location_id<\/code> refers to a GCP region<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]},{"id":"getInstance","type":"instance","name":"getInstance","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L734","description":"<p>Gets details of a single Instance.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedName = $cloudMemcacheClient-&gt;instanceName('[PROJECT]', '[LOCATION]', '[INSTANCE]');\n    $response = $cloudMemcacheClient-&gt;getInstance($formattedName);\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"name","description":"<p>Required. Memcached instance resource name in the format:\n<code>projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}<\/code>\nwhere <code>location_id<\/code> refers to a GCP region<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/instance\">Google\\Cloud\\Memcache\\V1beta2\\Instance<\/a>"],"description":""}]},{"id":"listInstances","type":"instance","name":"listInstances","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L803","description":"<p>Lists Instances in a given location.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedParent = $cloudMemcacheClient-&gt;locationName('[PROJECT]', '[LOCATION]');\n    \/\/ Iterate over pages of elements\n    $pagedResponse = $cloudMemcacheClient-&gt;listInstances($formattedParent);\n    foreach ($pagedResponse-&gt;iteratePages() as $page) {\n        foreach ($page as $element) {\n            \/\/ doSomethingWith($element);\n        }\n    }\n    \/\/ Alternatively:\n    \/\/ Iterate through all elements\n    $pagedResponse = $cloudMemcacheClient-&gt;listInstances($formattedParent);\n    foreach ($pagedResponse-&gt;iterateAllElements() as $element) {\n        \/\/ doSomethingWith($element);\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"parent","description":"<p>Required. The resource name of the instance location using the form:\n<code>projects\/{project_id}\/locations\/{location_id}<\/code>\nwhere <code>location_id<\/code> refers to a GCP region<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.pageSize\n","description":"<p>The maximum number of resources contained in the underlying API response. The API may return fewer values in a page, even if there are additional values to be retrieved.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.pageToken\n","description":"<p>A page token is used to specify a page of values to be returned. If no page token is specified (the default), the first page of values will be returned. Any page token used here must have been generated by a previous call to the API.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.filter\n","description":"<p>List filter. For example, exclude all Memcached instances with name as my-instance by specifying <code>\"name != my-instance\"<\/code>.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.orderBy\n","description":"<p>Sort results. Supported values are &quot;name&quot;, &quot;name desc&quot; or &quot;&quot; (unsorted).<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/PagedListResponse.html\" target=\"_blank\">Google\\ApiCore\\PagedListResponse<\/a>"],"description":""}]},{"id":"updateInstance","type":"instance","name":"updateInstance","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L889","description":"<p>Updates an existing Instance in a given project and location.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $updateMask = new FieldMask();\n    $resource = new Instance();\n    $operationResponse = $cloudMemcacheClient-&gt;updateInstance($updateMask, $resource);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        $result = $operationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;updateInstance($updateMask, $resource);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'updateInstance');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        $result = $newOperationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"updateMask","description":"<p>Required. Mask of fields to update.<\/p>\n<ul>\n<li><code>displayName<\/code><\/li>\n<\/ul>","types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/FieldMask.php\" target=\"_blank\">Google\\Protobuf\\FieldMask<\/a>"],"optional":false,"nullable":null},{"name":"resource","description":"<p>Required. A Memcached [Instance] resource.\nOnly fields specified in update_mask are updated.<\/p>","types":["<a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/instance\">Google\\Cloud\\Memcache\\V1beta2\\Instance<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]},{"id":"updateParameters","type":"instance","name":"updateParameters","source":"Memcache\/src\/V1beta2\/Gapic\/CloudMemcacheGapicClient.php#L964","description":"<p>Updates the defined Memcached parameters for an existing instance.<\/p>\n<p>This method only stages the parameters, it must be followed by\n<code>ApplyParameters<\/code> to apply the parameters to nodes of the Memcached\ninstance.<\/p>\n<p>Sample code:<\/p>\n<pre><code>$cloudMemcacheClient = new CloudMemcacheClient();\ntry {\n    $formattedName = $cloudMemcacheClient-&gt;instanceName('[PROJECT]', '[LOCATION]', '[INSTANCE]');\n    $updateMask = new FieldMask();\n    $operationResponse = $cloudMemcacheClient-&gt;updateParameters($formattedName, $updateMask);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n        $result = $operationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $operationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n    \/\/ Alternatively:\n    \/\/ start the operation, keep the operation name, and resume later\n    $operationResponse = $cloudMemcacheClient-&gt;updateParameters($formattedName, $updateMask);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $cloudMemcacheClient-&gt;resumeOperation($operationName, 'updateParameters');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n        $result = $newOperationResponse-&gt;getResult();\n    \/\/ doSomethingWith($result)\n    } else {\n        $error = $newOperationResponse-&gt;getError();\n        \/\/ handleError($error)\n    }\n} finally {\n    $cloudMemcacheClient-&gt;close();\n}<\/code><\/pre>\n\nImplemented in <a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/gapic\/cloudmemcachegapicclient\">Google\\Cloud\\Memcache\\V1beta2\\Gapic\\CloudMemcacheGapicClient<\/a>","examples":[],"resources":[],"params":[{"name":"name","description":"<p>Required. Resource name of the Memcached instance for which the parameters should be\nupdated.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"updateMask","description":"<p>Required. Mask of fields to update.<\/p>","types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/FieldMask.php\" target=\"_blank\">Google\\Protobuf\\FieldMask<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.parameters\n","description":"<p>The parameters to apply to the instance.<\/p>","types":["<a data-custom-type=\"cloud-memcache\/main\/memcache\/v1beta2\/memcacheparameters\">Google\\Cloud\\Memcache\\V1beta2\\MemcacheParameters<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. Can be a <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> object, or an associative array of retry settings parameters. See the documentation on <a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a> for example usage.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/RetrySettings.html\" target=\"_blank\">Google\\ApiCore\\RetrySettings<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\ApiCore\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/v1.17.0\/Google\/ApiCore\/OperationResponse.html\" target=\"_blank\">Google\\ApiCore\\OperationResponse<\/a>"],"description":""}]}]}