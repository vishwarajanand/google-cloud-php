{"id":"translate\/v3\/inputconfig","type":"","title":"Google\\Cloud\\Translate\\V3\\InputConfig","name":"InputConfig","description":"<p>Input configuration for BatchTranslateText request.<\/p>\n<p>Generated from protobuf message <code>google.cloud.translation.v3.InputConfig<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"Translate\/src\/V3\/InputConfig.php#L59","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.mime_type\n","description":"<p>Optional. Can be &quot;text\/plain&quot; or &quot;text\/html&quot;. For <code>.tsv<\/code>, &quot;text\/html&quot; is used if mime_type is missing. For <code>.html<\/code>, this field must be &quot;text\/html&quot; or empty. For <code>.txt<\/code>, this field must be &quot;text\/plain&quot; or empty.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.gcs_source\n","description":"<p>Required. Google Cloud Storage location for the source input. This can be a single file (for example, <code>gs:\/\/translation-test\/input.tsv<\/code>) or a wildcard (for example, <code>gs:\/\/translation-test\/&amp;#42;<\/code>). If a file extension is <code>.tsv<\/code>, it can contain either one or two columns. The first column (optional) is the id of the text request. If the first column is missing, we use the row number (0-based) from the input file as the ID in the output file. The second column is the actual text to be translated. We recommend each row be &lt;= 10K Unicode codepoints, otherwise an error might be returned. Note that the input tsv must be RFC 4180 compliant. You could use <a href=\"https:\/\/github.com\/Clever\/csvlint\">https:\/\/github.com\/Clever\/csvlint<\/a> to check potential formatting errors in your tsv file. csvlint --delimiter='\\t' your_input_file.tsv The other supported file extensions are <code>.txt<\/code> or <code>.html<\/code>, which is treated as a single large chunk of text.<\/p>","types":["<a data-custom-type=\"cloud-translate\/main\/translate\/v3\/gcssource\">Google\\Cloud\\Translate\\V3\\GcsSource<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getMimeType","type":"instance","name":"getMimeType","source":"Translate\/src\/V3\/InputConfig.php#L73","description":"<p>Optional. Can be &quot;text\/plain&quot; or &quot;text\/html&quot;.<\/p>\n<p>For <code>.tsv<\/code>, &quot;text\/html&quot; is used if mime_type is missing.\nFor <code>.html<\/code>, this field must be &quot;text\/html&quot; or empty.\nFor <code>.txt<\/code>, this field must be &quot;text\/plain&quot; or empty.<\/p>\n<p>Generated from protobuf field <code>string mime_type = 1 [(.google.api.field_behavior) = OPTIONAL];<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setMimeType","type":"instance","name":"setMimeType","source":"Translate\/src\/V3\/InputConfig.php#L88","description":"<p>Optional. Can be &quot;text\/plain&quot; or &quot;text\/html&quot;.<\/p>\n<p>For <code>.tsv<\/code>, &quot;text\/html&quot; is used if mime_type is missing.\nFor <code>.html<\/code>, this field must be &quot;text\/html&quot; or empty.\nFor <code>.txt<\/code>, this field must be &quot;text\/plain&quot; or empty.<\/p>\n<p>Generated from protobuf field <code>string mime_type = 1 [(.google.api.field_behavior) = OPTIONAL];<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Optional. Can be &quot;text\/plain&quot; or &quot;text\/html&quot;.<\/p>\n<p>For <code>.tsv<\/code>, &quot;text\/html&quot; is used if mime_type is missing.\nFor <code>.html<\/code>, this field must be &quot;text\/html&quot; or empty.\nFor <code>.txt<\/code>, this field must be &quot;text\/plain&quot; or empty.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-translate\/main\/translate\/v3\/inputconfig\">Google\\Cloud\\Translate\\V3\\InputConfig<\/a>"],"description":""}]},{"id":"getGcsSource","type":"instance","name":"getGcsSource","source":"Translate\/src\/V3\/InputConfig.php#L117","description":"<p>Required. Google Cloud Storage location for the source input.<\/p>\n<p>This can be a single file (for example,\n<code>gs:\/\/translation-test\/input.tsv<\/code>) or a wildcard (for example,\n<code>gs:\/\/translation-test\/&amp;#42;<\/code>). If a file extension is <code>.tsv<\/code>, it can\ncontain either one or two columns. The first column (optional) is the id\nof the text request. If the first column is missing, we use the row\nnumber (0-based) from the input file as the ID in the output file. The\nsecond column is the actual text to be\ntranslated. We recommend each row be &lt;= 10K Unicode codepoints,\notherwise an error might be returned.\nNote that the input tsv must be RFC 4180 compliant.\nYou could use <a href=\"https:\/\/github.com\/Clever\/csvlint\">https:\/\/github.com\/Clever\/csvlint<\/a> to check potential\nformatting errors in your tsv file.\ncsvlint --delimiter='\\t' your_input_file.tsv\nThe other supported file extensions are <code>.txt<\/code> or <code>.html<\/code>, which is\ntreated as a single large chunk of text.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.translation.v3.GcsSource gcs_source = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-translate\/main\/translate\/v3\/gcssource\">Google\\Cloud\\Translate\\V3\\GcsSource<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setGcsSource","type":"instance","name":"setGcsSource","source":"Translate\/src\/V3\/InputConfig.php#L149","description":"<p>Required. Google Cloud Storage location for the source input.<\/p>\n<p>This can be a single file (for example,\n<code>gs:\/\/translation-test\/input.tsv<\/code>) or a wildcard (for example,\n<code>gs:\/\/translation-test\/&amp;#42;<\/code>). If a file extension is <code>.tsv<\/code>, it can\ncontain either one or two columns. The first column (optional) is the id\nof the text request. If the first column is missing, we use the row\nnumber (0-based) from the input file as the ID in the output file. The\nsecond column is the actual text to be\ntranslated. We recommend each row be &lt;= 10K Unicode codepoints,\notherwise an error might be returned.\nNote that the input tsv must be RFC 4180 compliant.\nYou could use <a href=\"https:\/\/github.com\/Clever\/csvlint\">https:\/\/github.com\/Clever\/csvlint<\/a> to check potential\nformatting errors in your tsv file.\ncsvlint --delimiter='\\t' your_input_file.tsv\nThe other supported file extensions are <code>.txt<\/code> or <code>.html<\/code>, which is\ntreated as a single large chunk of text.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.translation.v3.GcsSource gcs_source = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Required. Google Cloud Storage location for the source input.<\/p>\n<p>This can be a single file (for example,\n<code>gs:\/\/translation-test\/input.tsv<\/code>) or a wildcard (for example,\n<code>gs:\/\/translation-test\/&amp;#42;<\/code>). If a file extension is <code>.tsv<\/code>, it can\ncontain either one or two columns. The first column (optional) is the id\nof the text request. If the first column is missing, we use the row\nnumber (0-based) from the input file as the ID in the output file. The\nsecond column is the actual text to be\ntranslated. We recommend each row be &lt;= 10K Unicode codepoints,\notherwise an error might be returned.\nNote that the input tsv must be RFC 4180 compliant.\nYou could use <a href=\"https:\/\/github.com\/Clever\/csvlint\">https:\/\/github.com\/Clever\/csvlint<\/a> to check potential\nformatting errors in your tsv file.\ncsvlint --delimiter='\\t' your_input_file.tsv\nThe other supported file extensions are <code>.txt<\/code> or <code>.html<\/code>, which is\ntreated as a single large chunk of text.<\/p>\n","types":["<a data-custom-type=\"cloud-translate\/main\/translate\/v3\/gcssource\">Google\\Cloud\\Translate\\V3\\GcsSource<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-translate\/main\/translate\/v3\/inputconfig\">Google\\Cloud\\Translate\\V3\\InputConfig<\/a>"],"description":""}]},{"id":"getSource","type":"instance","name":"getSource","source":"Translate\/src\/V3\/InputConfig.php#L160","description":"","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]}]}