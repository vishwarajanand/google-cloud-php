{"id":"dlp\/v2\/cryptodeterministicconfig","type":"","title":"Google\\Cloud\\Dlp\\V2\\CryptoDeterministicConfig","name":"CryptoDeterministicConfig","description":"<p>Pseudonymization method that generates deterministic encryption for the given\ninput. Outputs a base64 encoded representation of the encrypted output.<\/p>\n<p>Uses AES-SIV based on the RFC <a href=\"https:\/\/tools.ietf.org\/html\/rfc5297\">https:\/\/tools.ietf.org\/html\/rfc5297<\/a>.<\/p>\n<p>Generated from protobuf message <code>google.privacy.dlp.v2.CryptoDeterministicConfig<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L133","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.crypto_key\n","description":"<p>The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.<\/p>","types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/cryptokey\">Google\\Cloud\\Dlp\\V2\\CryptoKey<\/a>"],"optional":null,"nullable":null},{"name":"data.surrogate_info_type\n","description":"<p>The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: \u29ddMY_TOKEN_TYPE.<\/p>","types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/infotype\">Google\\Cloud\\Dlp\\V2\\InfoType<\/a>"],"optional":null,"nullable":null},{"name":"data.context\n","description":"<p>A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an <code>InfoTypeTransformation<\/code> is applied to both structured and unstructured <code>ContentItem<\/code>s.<\/p>","types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/fieldid\">Google\\Cloud\\Dlp\\V2\\FieldId<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getCryptoKey","type":"instance","name":"getCryptoKey","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L146","description":"<p>The key used by the encryption function. For deterministic encryption\nusing AES-SIV, the provided key is internally expanded to 64 bytes prior to\nuse.<\/p>\n<p>Generated from protobuf field <code>.google.privacy.dlp.v2.CryptoKey crypto_key = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/cryptokey\">Google\\Cloud\\Dlp\\V2\\CryptoKey<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setCryptoKey","type":"instance","name":"setCryptoKey","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L170","description":"<p>The key used by the encryption function. For deterministic encryption\nusing AES-SIV, the provided key is internally expanded to 64 bytes prior to\nuse.<\/p>\n<p>Generated from protobuf field <code>.google.privacy.dlp.v2.CryptoKey crypto_key = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The key used by the encryption function. For deterministic encryption\nusing AES-SIV, the provided key is internally expanded to 64 bytes prior to\nuse.<\/p>\n","types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/cryptokey\">Google\\Cloud\\Dlp\\V2\\CryptoKey<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/cryptodeterministicconfig\">Google\\Cloud\\Dlp\\V2\\CryptoDeterministicConfig<\/a>"],"description":""}]},{"id":"getSurrogateInfoType","type":"instance","name":"getSurrogateInfoType","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L209","description":"<p>The custom info type to annotate the surrogate with.<\/p>\n<p>This annotation will be applied to the surrogate by prefixing it with\nthe name of the custom info type followed by the number of\ncharacters comprising the surrogate. The following scheme defines the\nformat: {info type name}({surrogate character count}):{surrogate}\nFor example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and\nthe surrogate is 'abc', the full replacement value\nwill be: 'MY_TOKEN_INFO_TYPE(3):abc'\nThis annotation identifies the surrogate when inspecting content using the\ncustom info type 'Surrogate'. This facilitates reversal of the\nsurrogate when it occurs in free text.\nNote: For record transformations where the entire cell in a table is being\ntransformed, surrogates are not mandatory. Surrogates are used to denote\nthe location of the token and are necessary for re-identification in free\nform text.\nIn order for inspection to work properly, the name of this info type must\nnot occur naturally anywhere in your data; otherwise, inspection may either<\/p>\n<ul>\n<li>reverse a surrogate that does not correspond to an actual identifier<\/li>\n<li>be unable to parse the surrogate and result in an error\nTherefore, choose your custom info type name carefully after considering\nwhat your data looks like. One way to select a name that has a high chance\nof yielding reliable detection is to include one or more unicode characters\nthat are highly improbable to exist in your data.\nFor example, assuming your data is entered from a regular ASCII keyboard,\nthe symbol with the hex code point 29DD might be used like so:\n\u29ddMY_TOKEN_TYPE.<\/li>\n<\/ul>\n<p>Generated from protobuf field <code>.google.privacy.dlp.v2.InfoType surrogate_info_type = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/infotype\">Google\\Cloud\\Dlp\\V2\\InfoType<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setSurrogateInfoType","type":"instance","name":"setSurrogateInfoType","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L256","description":"<p>The custom info type to annotate the surrogate with.<\/p>\n<p>This annotation will be applied to the surrogate by prefixing it with\nthe name of the custom info type followed by the number of\ncharacters comprising the surrogate. The following scheme defines the\nformat: {info type name}({surrogate character count}):{surrogate}\nFor example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and\nthe surrogate is 'abc', the full replacement value\nwill be: 'MY_TOKEN_INFO_TYPE(3):abc'\nThis annotation identifies the surrogate when inspecting content using the\ncustom info type 'Surrogate'. This facilitates reversal of the\nsurrogate when it occurs in free text.\nNote: For record transformations where the entire cell in a table is being\ntransformed, surrogates are not mandatory. Surrogates are used to denote\nthe location of the token and are necessary for re-identification in free\nform text.\nIn order for inspection to work properly, the name of this info type must\nnot occur naturally anywhere in your data; otherwise, inspection may either<\/p>\n<ul>\n<li>reverse a surrogate that does not correspond to an actual identifier<\/li>\n<li>be unable to parse the surrogate and result in an error\nTherefore, choose your custom info type name carefully after considering\nwhat your data looks like. One way to select a name that has a high chance\nof yielding reliable detection is to include one or more unicode characters\nthat are highly improbable to exist in your data.\nFor example, assuming your data is entered from a regular ASCII keyboard,\nthe symbol with the hex code point 29DD might be used like so:\n\u29ddMY_TOKEN_TYPE.<\/li>\n<\/ul>\n<p>Generated from protobuf field <code>.google.privacy.dlp.v2.InfoType surrogate_info_type = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>The custom info type to annotate the surrogate with.<\/p>\n<p>This annotation will be applied to the surrogate by prefixing it with\nthe name of the custom info type followed by the number of\ncharacters comprising the surrogate. The following scheme defines the\nformat: {info type name}({surrogate character count}):{surrogate}\nFor example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and\nthe surrogate is 'abc', the full replacement value\nwill be: 'MY_TOKEN_INFO_TYPE(3):abc'\nThis annotation identifies the surrogate when inspecting content using the\ncustom info type 'Surrogate'. This facilitates reversal of the\nsurrogate when it occurs in free text.\nNote: For record transformations where the entire cell in a table is being\ntransformed, surrogates are not mandatory. Surrogates are used to denote\nthe location of the token and are necessary for re-identification in free\nform text.\nIn order for inspection to work properly, the name of this info type must\nnot occur naturally anywhere in your data; otherwise, inspection may either<\/p>\n<ul>\n<li>reverse a surrogate that does not correspond to an actual identifier<\/li>\n<li>be unable to parse the surrogate and result in an error\nTherefore, choose your custom info type name carefully after considering\nwhat your data looks like. One way to select a name that has a high chance\nof yielding reliable detection is to include one or more unicode characters\nthat are highly improbable to exist in your data.\nFor example, assuming your data is entered from a regular ASCII keyboard,\nthe symbol with the hex code point 29DD might be used like so:\n\u29ddMY_TOKEN_TYPE.<\/li>\n<\/ul>\n","types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/infotype\">Google\\Cloud\\Dlp\\V2\\InfoType<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/cryptodeterministicconfig\">Google\\Cloud\\Dlp\\V2\\CryptoDeterministicConfig<\/a>"],"description":""}]},{"id":"getContext","type":"instance","name":"getContext","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L283","description":"<p>A context may be used for higher security and maintaining\nreferential integrity such that the same identifier in two different\ncontexts will be given a distinct surrogate. The context is appended to\nplaintext value being encrypted. On decryption the provided context is\nvalidated against the value used during encryption. If a context was\nprovided during encryption, same context must be provided during decryption\nas well.<\/p>\n<p>If the context is not set, plaintext would be used as is for encryption.\nIf the context is set but:<\/p>\n<ol>\n<li>there is no record present when transforming a given value or<\/li>\n<li>the field is not present when transforming a given value,\nplaintext would be used as is for encryption.\nNote that case (1) is expected when an <code>InfoTypeTransformation<\/code> is\napplied to both structured and unstructured <code>ContentItem<\/code>s.<\/li>\n<\/ol>\n<p>Generated from protobuf field <code>.google.privacy.dlp.v2.FieldId context = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/fieldid\">Google\\Cloud\\Dlp\\V2\\FieldId<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setContext","type":"instance","name":"setContext","source":"Dlp\/src\/V2\/CryptoDeterministicConfig.php#L318","description":"<p>A context may be used for higher security and maintaining\nreferential integrity such that the same identifier in two different\ncontexts will be given a distinct surrogate. The context is appended to\nplaintext value being encrypted. On decryption the provided context is\nvalidated against the value used during encryption. If a context was\nprovided during encryption, same context must be provided during decryption\nas well.<\/p>\n<p>If the context is not set, plaintext would be used as is for encryption.\nIf the context is set but:<\/p>\n<ol>\n<li>there is no record present when transforming a given value or<\/li>\n<li>the field is not present when transforming a given value,\nplaintext would be used as is for encryption.\nNote that case (1) is expected when an <code>InfoTypeTransformation<\/code> is\napplied to both structured and unstructured <code>ContentItem<\/code>s.<\/li>\n<\/ol>\n<p>Generated from protobuf field <code>.google.privacy.dlp.v2.FieldId context = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>A context may be used for higher security and maintaining\nreferential integrity such that the same identifier in two different\ncontexts will be given a distinct surrogate. The context is appended to\nplaintext value being encrypted. On decryption the provided context is\nvalidated against the value used during encryption. If a context was\nprovided during encryption, same context must be provided during decryption\nas well.<\/p>\n<p>If the context is not set, plaintext would be used as is for encryption.\nIf the context is set but:<\/p>\n<ol>\n<li>there is no record present when transforming a given value or<\/li>\n<li>the field is not present when transforming a given value,\nplaintext would be used as is for encryption.\nNote that case (1) is expected when an <code>InfoTypeTransformation<\/code> is\napplied to both structured and unstructured <code>ContentItem<\/code>s.<\/li>\n<\/ol>\n","types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/fieldid\">Google\\Cloud\\Dlp\\V2\\FieldId<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"cloud-dlp\/main\/dlp\/v2\/cryptodeterministicconfig\">Google\\Cloud\\Dlp\\V2\\CryptoDeterministicConfig<\/a>"],"description":""}]}]}