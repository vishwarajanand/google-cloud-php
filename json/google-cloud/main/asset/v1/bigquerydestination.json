{"id":"asset\/v1\/bigquerydestination","type":"","title":"Google\\Cloud\\Asset\\V1\\BigQueryDestination","name":"BigQueryDestination","description":"<p>A BigQuery destination for exporting assets to.<\/p>\n<p>Generated from protobuf message <code>google.cloud.asset.v1.BigQueryDestination<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"Asset\/src\/V1\/BigQueryDestination.php#L165","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.dataset\n","description":"<p>Required. The BigQuery dataset in format &quot;projects\/projectId\/datasets\/datasetId&quot;, to which the snapshot result should be exported. If this dataset does not exist, the export call returns an INVALID_ARGUMENT error. Setting the <code>contentType<\/code> for <code>exportAssets<\/code> determines the <a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/exporting-to-bigquery#bigquery-schema\">schema<\/a> of the BigQuery table. Setting <code>separateTablesPerAssetType<\/code> to <code>TRUE<\/code> also influences the schema.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.table\n","description":"<p>Required. The BigQuery table to which the snapshot result should be written. If this table does not exist, a new table with the given name will be created.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.force\n","description":"<p>If the destination table already exists and this flag is <code>TRUE<\/code>, the table will be overwritten by the contents of assets snapshot. If the flag is <code>FALSE<\/code> or unset and the destination table already exists, the export call returns an INVALID_ARGUMEMT error.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null},{"name":"data.partition_spec\n","description":"<p>[partition_spec] determines whether to export to partitioned table(s) and how to partition the data. If [partition_spec] is unset or [partition_spec.partition_key] is unset or <code>PARTITION_KEY_UNSPECIFIED<\/code>, the snapshot results will be exported to non-partitioned table(s). [force] will decide whether to overwrite existing table(s). If [partition_spec] is specified. First, the snapshot results will be written to partitioned table(s) with two additional timestamp columns, readTime and requestTime, one of which will be the partition key. Secondly, in the case when any destination table already exists, it will first try to update existing table's schema as necessary by appending additional columns. Then, if [force] is <code>TRUE<\/code>, the corresponding partition will be overwritten by the snapshot results (data in different partitions will remain intact); if [force] is unset or <code>FALSE<\/code>, it will append the data. An error will be returned if the schema update or data appension fails.<\/p>","types":["<a data-custom-type=\"asset\/v1\/partitionspec\">Google\\Cloud\\Asset\\V1\\PartitionSpec<\/a>"],"optional":null,"nullable":null},{"name":"data.separate_tables_per_asset_type\n","description":"<p>If this flag is <code>TRUE<\/code>, the snapshot results will be written to one or multiple tables, each of which contains results of one asset type. The [force] and [partition<em>spec] fields will apply to each of them. Field [table] will be concatenated with &quot;<\/em>&quot; and the asset type names (see <a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types\">https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types<\/a> for supported asset types) to construct per-asset-type table names, in which all non-alphanumeric characters like &quot;.&quot; and &quot;\/&quot; will be substituted by &quot;_&quot;. Example: if field [table] is &quot;mytable&quot; and snapshot results contain &quot;storage.googleapis.com\/Bucket&quot; assets, the corresponding table name will be &quot;mytable_storage_googleapis_com_Bucket&quot;. If any of these tables does not exist, a new table with the concatenated name will be created. When [content_type] in the ExportAssetsRequest is <code>RESOURCE<\/code>, the schema of each table will include RECORD-type columns mapped to the nested fields in the Asset.resource.data field of that asset type (up to the 15 nested level BigQuery supports (<a href=\"https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations\">https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations<\/a>)). The fields in &gt;15 nested levels will be stored in JSON format string as a child column of its parent RECORD column. If error occurs when exporting to any table, the whole export call will return an error but the export results that already succeed will persist. Example: if exporting to table_type_A succeeds when exporting to table_type_B fails during one export call, the results in table_type_A will persist and there will not be partial results persisting in a table.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getDataset","type":"instance","name":"getDataset","source":"Asset\/src\/V1\/BigQueryDestination.php#L183","description":"<p>Required. The BigQuery dataset in format\n&quot;projects\/projectId\/datasets\/datasetId&quot;, to which the snapshot result\nshould be exported. If this dataset does not exist, the export call returns\nan INVALID_ARGUMENT error. Setting the <code>contentType<\/code> for <code>exportAssets<\/code>\ndetermines the\n<a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/exporting-to-bigquery#bigquery-schema\">schema<\/a>\nof the BigQuery table. Setting <code>separateTablesPerAssetType<\/code> to <code>TRUE<\/code> also\ninfluences the schema.<\/p>\n<p>Generated from protobuf field <code>string dataset = 1 [(.google.api.field_behavior) = REQUIRED];<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setDataset","type":"instance","name":"setDataset","source":"Asset\/src\/V1\/BigQueryDestination.php#L202","description":"<p>Required. The BigQuery dataset in format\n&quot;projects\/projectId\/datasets\/datasetId&quot;, to which the snapshot result\nshould be exported. If this dataset does not exist, the export call returns\nan INVALID_ARGUMENT error. Setting the <code>contentType<\/code> for <code>exportAssets<\/code>\ndetermines the\n<a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/exporting-to-bigquery#bigquery-schema\">schema<\/a>\nof the BigQuery table. Setting <code>separateTablesPerAssetType<\/code> to <code>TRUE<\/code> also\ninfluences the schema.<\/p>\n<p>Generated from protobuf field <code>string dataset = 1 [(.google.api.field_behavior) = REQUIRED];<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Required. The BigQuery dataset in format\n&quot;projects\/projectId\/datasets\/datasetId&quot;, to which the snapshot result\nshould be exported. If this dataset does not exist, the export call returns\nan INVALID_ARGUMENT error. Setting the <code>contentType<\/code> for <code>exportAssets<\/code>\ndetermines the\n<a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/exporting-to-bigquery#bigquery-schema\">schema<\/a>\nof the BigQuery table. Setting <code>separateTablesPerAssetType<\/code> to <code>TRUE<\/code> also\ninfluences the schema.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"asset\/v1\/bigquerydestination\">Google\\Cloud\\Asset\\V1\\BigQueryDestination<\/a>"],"description":""}]},{"id":"getTable","type":"instance","name":"getTable","source":"Asset\/src\/V1\/BigQueryDestination.php#L218","description":"<p>Required. The BigQuery table to which the snapshot result should be\nwritten. If this table does not exist, a new table with the given name\nwill be created.<\/p>\n<p>Generated from protobuf field <code>string table = 2 [(.google.api.field_behavior) = REQUIRED];<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setTable","type":"instance","name":"setTable","source":"Asset\/src\/V1\/BigQueryDestination.php#L232","description":"<p>Required. The BigQuery table to which the snapshot result should be\nwritten. If this table does not exist, a new table with the given name\nwill be created.<\/p>\n<p>Generated from protobuf field <code>string table = 2 [(.google.api.field_behavior) = REQUIRED];<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Required. The BigQuery table to which the snapshot result should be\nwritten. If this table does not exist, a new table with the given name\nwill be created.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"asset\/v1\/bigquerydestination\">Google\\Cloud\\Asset\\V1\\BigQueryDestination<\/a>"],"description":""}]},{"id":"getForce","type":"instance","name":"getForce","source":"Asset\/src\/V1\/BigQueryDestination.php#L249","description":"<p>If the destination table already exists and this flag is <code>TRUE<\/code>, the\ntable will be overwritten by the contents of assets snapshot. If the flag\nis <code>FALSE<\/code> or unset and the destination table already exists, the export\ncall returns an INVALID_ARGUMEMT error.<\/p>\n<p>Generated from protobuf field <code>bool force = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setForce","type":"instance","name":"setForce","source":"Asset\/src\/V1\/BigQueryDestination.php#L264","description":"<p>If the destination table already exists and this flag is <code>TRUE<\/code>, the\ntable will be overwritten by the contents of assets snapshot. If the flag\nis <code>FALSE<\/code> or unset and the destination table already exists, the export\ncall returns an INVALID_ARGUMEMT error.<\/p>\n<p>Generated from protobuf field <code>bool force = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>If the destination table already exists and this flag is <code>TRUE<\/code>, the\ntable will be overwritten by the contents of assets snapshot. If the flag\nis <code>FALSE<\/code> or unset and the destination table already exists, the export\ncall returns an INVALID_ARGUMEMT error.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"asset\/v1\/bigquerydestination\">Google\\Cloud\\Asset\\V1\\BigQueryDestination<\/a>"],"description":""}]},{"id":"getPartitionSpec","type":"instance","name":"getPartitionSpec","source":"Asset\/src\/V1\/BigQueryDestination.php#L292","description":"<p>[partition_spec] determines whether to export to partitioned table(s) and\nhow to partition the data.<\/p>\n<p>If [partition_spec] is unset or [partition_spec.partition_key] is unset or\n<code>PARTITION_KEY_UNSPECIFIED<\/code>, the snapshot results will be exported to\nnon-partitioned table(s). [force] will decide whether to overwrite existing\ntable(s).\nIf [partition_spec] is specified. First, the snapshot results will be\nwritten to partitioned table(s) with two additional timestamp columns,\nreadTime and requestTime, one of which will be the partition key. Secondly,\nin the case when any destination table already exists, it will first try to\nupdate existing table's schema as necessary by appending additional\ncolumns. Then, if [force] is <code>TRUE<\/code>, the corresponding partition will be\noverwritten by the snapshot results (data in different partitions will\nremain intact); if [force] is unset or <code>FALSE<\/code>, it will append the data. An\nerror will be returned if the schema update or data appension fails.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.asset.v1.PartitionSpec partition_spec = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"asset\/v1\/partitionspec\">Google\\Cloud\\Asset\\V1\\PartitionSpec<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setPartitionSpec","type":"instance","name":"setPartitionSpec","source":"Asset\/src\/V1\/BigQueryDestination.php#L328","description":"<p>[partition_spec] determines whether to export to partitioned table(s) and\nhow to partition the data.<\/p>\n<p>If [partition_spec] is unset or [partition_spec.partition_key] is unset or\n<code>PARTITION_KEY_UNSPECIFIED<\/code>, the snapshot results will be exported to\nnon-partitioned table(s). [force] will decide whether to overwrite existing\ntable(s).\nIf [partition_spec] is specified. First, the snapshot results will be\nwritten to partitioned table(s) with two additional timestamp columns,\nreadTime and requestTime, one of which will be the partition key. Secondly,\nin the case when any destination table already exists, it will first try to\nupdate existing table's schema as necessary by appending additional\ncolumns. Then, if [force] is <code>TRUE<\/code>, the corresponding partition will be\noverwritten by the snapshot results (data in different partitions will\nremain intact); if [force] is unset or <code>FALSE<\/code>, it will append the data. An\nerror will be returned if the schema update or data appension fails.<\/p>\n<p>Generated from protobuf field <code>.google.cloud.asset.v1.PartitionSpec partition_spec = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>[partition_spec] determines whether to export to partitioned table(s) and\nhow to partition the data.<\/p>\n<p>If [partition_spec] is unset or [partition_spec.partition_key] is unset or\n<code>PARTITION_KEY_UNSPECIFIED<\/code>, the snapshot results will be exported to\nnon-partitioned table(s). [force] will decide whether to overwrite existing\ntable(s).\nIf [partition_spec] is specified. First, the snapshot results will be\nwritten to partitioned table(s) with two additional timestamp columns,\nreadTime and requestTime, one of which will be the partition key. Secondly,\nin the case when any destination table already exists, it will first try to\nupdate existing table's schema as necessary by appending additional\ncolumns. Then, if [force] is <code>TRUE<\/code>, the corresponding partition will be\noverwritten by the snapshot results (data in different partitions will\nremain intact); if [force] is unset or <code>FALSE<\/code>, it will append the data. An\nerror will be returned if the schema update or data appension fails.<\/p>\n","types":["<a data-custom-type=\"asset\/v1\/partitionspec\">Google\\Cloud\\Asset\\V1\\PartitionSpec<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"asset\/v1\/bigquerydestination\">Google\\Cloud\\Asset\\V1\\BigQueryDestination<\/a>"],"description":""}]},{"id":"getSeparateTablesPerAssetType","type":"instance","name":"getSeparateTablesPerAssetType","source":"Asset\/src\/V1\/BigQueryDestination.php#L365","description":"<p>If this flag is <code>TRUE<\/code>, the snapshot results will be written to one or\nmultiple tables, each of which contains results of one asset type. The\n[force] and [partition_spec] fields will apply to each of them.<\/p>\n<p>Field [table] will be concatenated with &quot;<em>&quot; and the asset type names (see\n<a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types\">https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types<\/a> for\nsupported asset types) to construct per-asset-type table names, in which\nall non-alphanumeric characters like &quot;.&quot; and &quot;\/&quot; will be substituted by\n&quot;<\/em>&quot;. Example: if field [table] is &quot;mytable&quot; and snapshot results\ncontain &quot;storage.googleapis.com\/Bucket&quot; assets, the corresponding table\nname will be &quot;mytable_storage_googleapis_com_Bucket&quot;. If any of these\ntables does not exist, a new table with the concatenated name will be\ncreated.\nWhen [content_type] in the ExportAssetsRequest is <code>RESOURCE<\/code>, the schema of\neach table will include RECORD-type columns mapped to the nested fields in\nthe Asset.resource.data field of that asset type (up to the 15 nested level\nBigQuery supports\n(<a href=\"https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations\">https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations<\/a>)). The\nfields in &gt;15 nested levels will be stored in JSON format string as a child\ncolumn of its parent RECORD column.\nIf error occurs when exporting to any table, the whole export call will\nreturn an error but the export results that already succeed will persist.\nExample: if exporting to table_type_A succeeds when exporting to\ntable_type_B fails during one export call, the results in table_type_A will\npersist and there will not be partial results persisting in a table.<\/p>\n<p>Generated from protobuf field <code>bool separate_tables_per_asset_type = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"setSeparateTablesPerAssetType","type":"instance","name":"setSeparateTablesPerAssetType","source":"Asset\/src\/V1\/BigQueryDestination.php#L400","description":"<p>If this flag is <code>TRUE<\/code>, the snapshot results will be written to one or\nmultiple tables, each of which contains results of one asset type. The\n[force] and [partition_spec] fields will apply to each of them.<\/p>\n<p>Field [table] will be concatenated with &quot;<em>&quot; and the asset type names (see\n<a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types\">https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types<\/a> for\nsupported asset types) to construct per-asset-type table names, in which\nall non-alphanumeric characters like &quot;.&quot; and &quot;\/&quot; will be substituted by\n&quot;<\/em>&quot;. Example: if field [table] is &quot;mytable&quot; and snapshot results\ncontain &quot;storage.googleapis.com\/Bucket&quot; assets, the corresponding table\nname will be &quot;mytable_storage_googleapis_com_Bucket&quot;. If any of these\ntables does not exist, a new table with the concatenated name will be\ncreated.\nWhen [content_type] in the ExportAssetsRequest is <code>RESOURCE<\/code>, the schema of\neach table will include RECORD-type columns mapped to the nested fields in\nthe Asset.resource.data field of that asset type (up to the 15 nested level\nBigQuery supports\n(<a href=\"https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations\">https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations<\/a>)). The\nfields in &gt;15 nested levels will be stored in JSON format string as a child\ncolumn of its parent RECORD column.\nIf error occurs when exporting to any table, the whole export call will\nreturn an error but the export results that already succeed will persist.\nExample: if exporting to table_type_A succeeds when exporting to\ntable_type_B fails during one export call, the results in table_type_A will\npersist and there will not be partial results persisting in a table.<\/p>\n<p>Generated from protobuf field <code>bool separate_tables_per_asset_type = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>If this flag is <code>TRUE<\/code>, the snapshot results will be written to one or\nmultiple tables, each of which contains results of one asset type. The\n[force] and [partition_spec] fields will apply to each of them.<\/p>\n<p>Field [table] will be concatenated with &quot;<em>&quot; and the asset type names (see\n<a href=\"https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types\">https:\/\/cloud.google.com\/asset-inventory\/docs\/supported-asset-types<\/a> for\nsupported asset types) to construct per-asset-type table names, in which\nall non-alphanumeric characters like &quot;.&quot; and &quot;\/&quot; will be substituted by\n&quot;<\/em>&quot;. Example: if field [table] is &quot;mytable&quot; and snapshot results\ncontain &quot;storage.googleapis.com\/Bucket&quot; assets, the corresponding table\nname will be &quot;mytable_storage_googleapis_com_Bucket&quot;. If any of these\ntables does not exist, a new table with the concatenated name will be\ncreated.\nWhen [content_type] in the ExportAssetsRequest is <code>RESOURCE<\/code>, the schema of\neach table will include RECORD-type columns mapped to the nested fields in\nthe Asset.resource.data field of that asset type (up to the 15 nested level\nBigQuery supports\n(<a href=\"https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations\">https:\/\/cloud.google.com\/bigquery\/docs\/nested-repeated#limitations<\/a>)). The\nfields in &gt;15 nested levels will be stored in JSON format string as a child\ncolumn of its parent RECORD column.\nIf error occurs when exporting to any table, the whole export call will\nreturn an error but the export results that already succeed will persist.\nExample: if exporting to table_type_A succeeds when exporting to\ntable_type_B fails during one export call, the results in table_type_A will\npersist and there will not be partial results persisting in a table.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"asset\/v1\/bigquerydestination\">Google\\Cloud\\Asset\\V1\\BigQueryDestination<\/a>"],"description":""}]}]}