{"id":"debugger\/v2\/variable","type":"","title":"Google\\Cloud\\Debugger\\V2\\Variable","name":"Variable","description":"<p>Represents a variable or an argument possibly of a compound object type.<\/p>\n<p>Note how the following variables are represented:\n1) A simple variable:\nint x = 5\n{ name: &quot;x&quot;, value: &quot;5&quot;, type: &quot;int&quot; }  \/\/ Captured variable\n2) A compound object:\nstruct T {\nint m1;\nint m2;\n};\nT x = { 3, 7 };\n{  \/\/ Captured variable\nname: &quot;x&quot;,\ntype: &quot;T&quot;,\nmembers { name: &quot;m1&quot;, value: &quot;3&quot;, type: &quot;int&quot; },\nmembers { name: &quot;m2&quot;, value: &quot;7&quot;, type: &quot;int&quot; }\n}\n3) A pointer where the pointee was captured:\nT x = { 3, 7 };\nT<em> p = &x;\n{   \/\/ Captured variable\nname: &quot;p&quot;,\ntype: &quot;T<\/em>&quot;,\nvalue: &quot;0x00500500&quot;,\nmembers { name: &quot;m1&quot;, value: &quot;3&quot;, type: &quot;int&quot; },\nmembers { name: &quot;m2&quot;, value: &quot;7&quot;, type: &quot;int&quot; }\n}\n4) A pointer where the pointee was not captured:\nT<em> p = new T;\n{   \/\/ Captured variable\nname: &quot;p&quot;,\ntype: &quot;T<\/em>&quot;,\nvalue: &quot;0x00400400&quot;\nstatus { is_error: true, description { format: &quot;unavailable&quot; } }\n}\nThe status should describe the reason for the missing value,\nsuch as <code>&lt;optimized out&gt;<\/code>, <code>&lt;inaccessible&gt;<\/code>, <code>&lt;pointers limit reached&gt;<\/code>.\nNote that a null pointer should not have members.\n5) An unnamed value:\nint<em> p = new int(7);\n{   \/\/ Captured variable\nname: &quot;p&quot;,\nvalue: &quot;0x00500500&quot;,\ntype: &quot;int<\/em>&quot;,\nmembers { value: &quot;7&quot;, type: &quot;int&quot; } }\n6) An unnamed pointer where the pointee was not captured:\nint<em> p = new int(7);\nint<strong> pp = &p;\n{  \/\/ Captured variable\nname: &quot;pp&quot;,\nvalue: &quot;0x00500500&quot;,\ntype: &quot;int<\/strong>&quot;,\nmembers {\nvalue: &quot;0x00400400&quot;,\ntype: &quot;int<\/em>&quot;\nstatus {\nis_error: true,\ndescription: { format: &quot;unavailable&quot; } }\n}\n}\n}\nTo optimize computation, memory and network traffic, variables that\nrepeat in the output multiple times can be stored once in a shared\nvariable table and be referenced using the <code>var_table_index<\/code> field.  The\nvariables stored in the shared table are nameless and are essentially\na partition of the complete variable. To reconstruct the complete\nvariable, merge the referencing variable with the referenced variable.\nWhen using the shared variable table, the following variables:\nT x = { 3, 7 };\nT<em> p = &x;\nT&amp; r = x;\n{ name: &quot;x&quot;, var_table_index: 3, type: &quot;T&quot; }  \/\/ Captured variables\n{ name: &quot;p&quot;, value &quot;0x00500500&quot;, type=&quot;T<\/em>&quot;, var_table_index: 3 }\n{ name: &quot;r&quot;, type=&quot;T&amp;&quot;, var_table_index: 3 }\n{  \/\/ Shared variable table entry #3:\nmembers { name: &quot;m1&quot;, value: &quot;3&quot;, type: &quot;int&quot; },\nmembers { name: &quot;m2&quot;, value: &quot;7&quot;, type: &quot;int&quot; }\n}\nNote that the pointer address is stored with the referencing variable\nand not with the referenced variable. This allows the referenced variable\nto be shared between pointers and references.\nThe type field is optional. The debugger agent may or may not support it.<\/p>\n<p>Generated from protobuf message <code>google.devtools.clouddebugger.v2.Variable<\/code><\/p>\n<p>Extends <a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/Message.php\" target=\"_blank\">Google\\Protobuf\\Internal\\Message<\/a><\/p>","examples":[],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"Debugger\/src\/V2\/Variable.php#L192","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"data","description":"<p>Optional. Data for populating the Message object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"data.name\n","description":"<p>Name of the variable, if any.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.value\n","description":"<p>Simple value of the variable.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.type\n","description":"<p>Variable type (e.g. <code>MyClass<\/code>). If the variable is split with <code>var_table_index<\/code>, <code>type<\/code> goes next to <code>value<\/code>. The interpretation of a type is agent specific. It is recommended to include the dynamic type rather than a static type of an object.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"data.members\n","description":"<p>Members contained or pointed to by the variable.<\/p>","types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable[]<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"optional":null,"nullable":null},{"name":"data.var_table_index\n","description":"<p>Reference to a variable in the shared variable table. More than one variable can reference the same variable in the table. The <code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>","types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Int32Value.php\" target=\"_blank\">Google\\Protobuf\\Int32Value<\/a>"],"optional":null,"nullable":null},{"name":"data.status\n","description":"<p>Status associated with the variable. This field will usually stay unset. A status of a single variable only applies to that variable or expression. The rest of breakpoint data still remains valid. Variables might be reported in error state even when breakpoint is not in final state. The message may refer to variable name with <code>refers_to<\/code> set to <code>VARIABLE_NAME<\/code>. Alternatively <code>refers_to<\/code> will be set to <code>VARIABLE_VALUE<\/code>. In either case variable value and members will be unset. Example of error message applied to name: <code>Invalid expression syntax<\/code>. Example of information message applied to value: <code>Not captured<\/code>. Examples of error message applied to value: <em> <code>Malformed string<\/code>, <\/em> <code>Field f not found in class C<\/code> * <code>Null pointer dereference<\/code><\/p>","types":["<a data-custom-type=\"debugger\/v2\/statusmessage\">Google\\Cloud\\Debugger\\V2\\StatusMessage<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"getName","type":"instance","name":"getName","source":"Debugger\/src\/V2\/Variable.php#L203","description":"<p>Name of the variable, if any.<\/p>\n<p>Generated from protobuf field <code>string name = 1;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setName","type":"instance","name":"setName","source":"Debugger\/src\/V2\/Variable.php#L215","description":"<p>Name of the variable, if any.<\/p>\n<p>Generated from protobuf field <code>string name = 1;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Name of the variable, if any.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]},{"id":"getValue","type":"instance","name":"getValue","source":"Debugger\/src\/V2\/Variable.php#L229","description":"<p>Simple value of the variable.<\/p>\n<p>Generated from protobuf field <code>string value = 2;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setValue","type":"instance","name":"setValue","source":"Debugger\/src\/V2\/Variable.php#L241","description":"<p>Simple value of the variable.<\/p>\n<p>Generated from protobuf field <code>string value = 2;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Simple value of the variable.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]},{"id":"getType","type":"instance","name":"getType","source":"Debugger\/src\/V2\/Variable.php#L258","description":"<p>Variable type (e.g. <code>MyClass<\/code>). If the variable is split with\n<code>var_table_index<\/code>, <code>type<\/code> goes next to <code>value<\/code>. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object.<\/p>\n<p>Generated from protobuf field <code>string type = 6;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"description":""}]},{"id":"setType","type":"instance","name":"setType","source":"Debugger\/src\/V2\/Variable.php#L273","description":"<p>Variable type (e.g. <code>MyClass<\/code>). If the variable is split with\n<code>var_table_index<\/code>, <code>type<\/code> goes next to <code>value<\/code>. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object.<\/p>\n<p>Generated from protobuf field <code>string type = 6;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Variable type (e.g. <code>MyClass<\/code>). If the variable is split with\n<code>var_table_index<\/code>, <code>type<\/code> goes next to <code>value<\/code>. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]},{"id":"getMembers","type":"instance","name":"getMembers","source":"Debugger\/src\/V2\/Variable.php#L287","description":"<p>Members contained or pointed to by the variable.<\/p>\n<p>Generated from protobuf field <code>repeated .google.devtools.clouddebugger.v2.Variable members = 3;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"description":""}]},{"id":"setMembers","type":"instance","name":"setMembers","source":"Debugger\/src\/V2\/Variable.php#L299","description":"<p>Members contained or pointed to by the variable.<\/p>\n<p>Generated from protobuf field <code>repeated .google.devtools.clouddebugger.v2.Variable members = 3;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Members contained or pointed to by the variable.<\/p>\n","types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable[]<\/a>","<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Internal\/RepeatedField.php\" target=\"_blank\">Google\\Protobuf\\Internal\\RepeatedField<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]},{"id":"getVarTableIndex","type":"instance","name":"getVarTableIndex","source":"Debugger\/src\/V2\/Variable.php#L315","description":"<p>Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n<code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>\n<p>Generated from protobuf field <code>.google.protobuf.Int32Value var_table_index = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Int32Value.php\" target=\"_blank\">Google\\Protobuf\\Int32Value<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"getVarTableIndexValue","type":"instance","name":"getVarTableIndexValue","source":"Debugger\/src\/V2\/Variable.php#L340","description":"<p>Returns the unboxed value from <code>getVarTableIndex()<\/code><\/p>\n<p>Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n<code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>\n<p>Generated from protobuf field <code>.google.protobuf.Int32Value var_table_index = 4;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setVarTableIndex","type":"instance","name":"setVarTableIndex","source":"Debugger\/src\/V2\/Variable.php#L354","description":"<p>Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n<code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>\n<p>Generated from protobuf field <code>.google.protobuf.Int32Value var_table_index = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n<code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>\n","types":["<a href=\"https:\/\/github.com\/protocolbuffers\/protobuf-php\/tree\/v3.21.9\/src\/Google\/Protobuf\/Int32Value.php\" target=\"_blank\">Google\\Protobuf\\Int32Value<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]},{"id":"setVarTableIndexValue","type":"instance","name":"setVarTableIndexValue","source":"Debugger\/src\/V2\/Variable.php#L373","description":"<p>Sets the field by wrapping a primitive type in a Google\\Protobuf\\Int32Value object.<\/p>\n<p>Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n<code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>\n<p>Generated from protobuf field <code>.google.protobuf.Int32Value var_table_index = 4;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Sets the field by wrapping a primitive type in a Google\\Protobuf\\Int32Value object.<\/p>\n<p>Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n<code>var_table_index<\/code> field is an index into <code>variable_table<\/code> in Breakpoint.<\/p>\n","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]},{"id":"getStatus","type":"instance","name":"getStatus","source":"Debugger\/src\/V2\/Variable.php#L397","description":"<p>Status associated with the variable. This field will usually stay\nunset. A status of a single variable only applies to that variable or\nexpression. The rest of breakpoint data still remains valid. Variables\nmight be reported in error state even when breakpoint is not in final\nstate.<\/p>\n<p>The message may refer to variable name with <code>refers_to<\/code> set to\n<code>VARIABLE_NAME<\/code>. Alternatively <code>refers_to<\/code> will be set to <code>VARIABLE_VALUE<\/code>.\nIn either case variable value and members will be unset.\nExample of error message applied to name: <code>Invalid expression syntax<\/code>.\nExample of information message applied to value: <code>Not captured<\/code>.\nExamples of error message applied to value:<\/p>\n<ul>\n<li><code>Malformed string<\/code>,<\/li>\n<li><code>Field f not found in class C<\/code><\/li>\n<li><code>Null pointer dereference<\/code><\/li>\n<\/ul>\n<p>Generated from protobuf field <code>.google.devtools.clouddebugger.v2.StatusMessage status = 5;<\/code><\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/statusmessage\">Google\\Cloud\\Debugger\\V2\\StatusMessage<\/a>","<a href=\"http:\/\/php.net\/manual\/en\/language.types.null.php\" target=\"_blank\">null<\/a>"],"description":""}]},{"id":"setStatus","type":"instance","name":"setStatus","source":"Debugger\/src\/V2\/Variable.php#L432","description":"<p>Status associated with the variable. This field will usually stay\nunset. A status of a single variable only applies to that variable or\nexpression. The rest of breakpoint data still remains valid. Variables\nmight be reported in error state even when breakpoint is not in final\nstate.<\/p>\n<p>The message may refer to variable name with <code>refers_to<\/code> set to\n<code>VARIABLE_NAME<\/code>. Alternatively <code>refers_to<\/code> will be set to <code>VARIABLE_VALUE<\/code>.\nIn either case variable value and members will be unset.\nExample of error message applied to name: <code>Invalid expression syntax<\/code>.\nExample of information message applied to value: <code>Not captured<\/code>.\nExamples of error message applied to value:<\/p>\n<ul>\n<li><code>Malformed string<\/code>,<\/li>\n<li><code>Field f not found in class C<\/code><\/li>\n<li><code>Null pointer dereference<\/code><\/li>\n<\/ul>\n<p>Generated from protobuf field <code>.google.devtools.clouddebugger.v2.StatusMessage status = 5;<\/code><\/p>","examples":[],"resources":[],"params":[{"name":"var","description":"<p>Status associated with the variable. This field will usually stay\nunset. A status of a single variable only applies to that variable or\nexpression. The rest of breakpoint data still remains valid. Variables\nmight be reported in error state even when breakpoint is not in final\nstate.<\/p>\n<p>The message may refer to variable name with <code>refers_to<\/code> set to\n<code>VARIABLE_NAME<\/code>. Alternatively <code>refers_to<\/code> will be set to <code>VARIABLE_VALUE<\/code>.\nIn either case variable value and members will be unset.\nExample of error message applied to name: <code>Invalid expression syntax<\/code>.\nExample of information message applied to value: <code>Not captured<\/code>.\nExamples of error message applied to value:<\/p>\n<ul>\n<li><code>Malformed string<\/code>,<\/li>\n<li><code>Field f not found in class C<\/code><\/li>\n<li><code>Null pointer dereference<\/code><\/li>\n<\/ul>\n","types":["<a data-custom-type=\"debugger\/v2\/statusmessage\">Google\\Cloud\\Debugger\\V2\\StatusMessage<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"debugger\/v2\/variable\">Google\\Cloud\\Debugger\\V2\\Variable<\/a>"],"description":""}]}]}